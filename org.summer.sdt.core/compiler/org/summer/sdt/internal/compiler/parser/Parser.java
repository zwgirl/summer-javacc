/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.summer.sdt.internal.compiler.parser;
import java.io.*;
import java.util.*;

import org.summer.sdt.internal.compiler.util.Util;
import org.summer.sdt.internal.compiler.xaml.*;
import org.summer.sdt.internal.compiler.ast.*;
import org.summer.sdt.internal.compiler.env.*;
import org.summer.sdt.internal.compiler.*;
import org.summer.sdt.internal.compiler.problem.*;
import org.summer.sdt.internal.compiler.impl.*;
import org.summer.sdt.internal.compiler.parser.*;
import org.summer.sdt.internal.compiler.lookup.*;
import org.summer.sdt.internal.compiler.classfmt.*;
import org.summer.sdt.core.compiler.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class Parser implements TerminalTokens {
        //modifiers dimensions nestedType etc.......
        protected boolean optimizeStringLiterals =true;
        protected CompilerOptions options;

    protected ProblemReporter problemReporter;
        public ReferenceContext referenceContext;
    protected CompilationResult compilationResult;

        public CompilationUnitDeclaration compilationUnit; /*the result from parse()*/

        protected RecoveredElement currentElement;

        protected boolean diet = false; //tells the scanner to jump over some parts of the code/expressions like method bodies

        public org.summer.sdt.internal.compiler.ReadManager readManager;
        
        public int modifiers;
        
    	public Scanner scanner;

        // javadoc
        public Javadoc javadoc;
        public JavadocParser javadocParser;
        public Parser () {
                // Caveat Emptor: For inheritance purposes and then only in very special needs. Only minimal state is initialized !
        }
        public Parser(ProblemReporter problemReporter, boolean optimizeStringLiterals) {

                this.problemReporter = problemReporter;
                this.options = problemReporter.options;
                this.optimizeStringLiterals = optimizeStringLiterals;
//		initializeScanner();
//		this.parsingJava8Plus = this.options.sourceLevel >= ClassFileConstants.JDK1_8;//		this.astLengthStack = new int[50];//		this.expressionLengthStack = new int[30];//		this.typeAnnotationLengthStack = new int[30];//		this.intStack = new int[50];//		this.identifierStack = new char[30][];//		this.identifierLengthStack = new int[30];//		this.nestedMethod = new int[30];//		this.realBlockStack = new int[30];//		this.identifierPositionStack = new long[30];//		this.variablesCounter = new int[30];

                // javadoc support
                this.javadocParser = createJavadocParser();
        }

//	public void initializeScanner(){//		this.scanner = new Scanner(//			false /*comment*/,//			false /*whitespace*/,//			false, /* will be set in initialize(boolean) *///			this.options.sourceLevel /*sourceLevel*/,//			this.options.complianceLevel /*complianceLevel*/,//			this.options.taskTags/*taskTags*/,//			this.options.taskPriorities/*taskPriorities*/,//			this.options.isTaskCaseSensitive/*taskCaseSensitive*/);//	}

        protected JavadocParser createJavadocParser() {
                return new JavadocParser(this);
        }
    /**
     * Class to hold modifiers.
     */
    static public final class ModifierSet implements ClassFileConstants {

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers) {
       return (modifiers & AccPublic) != 0;
     }

     public boolean isProtected(int modifiers) {
       return (modifiers & AccProtected) != 0;
     }

     public boolean isPrivate(int modifiers) {
       return (modifiers & AccPrivate) != 0;
     }

     public boolean isStatic(int modifiers) {
       return (modifiers & AccStatic) != 0;
     }

     public boolean isAbstract(int modifiers) {
       return (modifiers & AccAbstract) != 0;
     }

     public boolean isFinal(int modifiers) {
       return (modifiers & AccFinal) != 0;
     }

     public boolean isNative(int modifiers) {
       return (modifiers & AccNative) != 0;
     }

     public boolean isStrictfp(int modifiers) {
       return (modifiers & AccStrictfp) != 0;
     }

     public boolean isSynchronized(int modifiers) {
       return (modifiers & AccSynchronized) != 0;
     }

     public boolean isTransient(int modifiers) {
       return (modifiers & AccTransient) != 0;
     }

     public boolean isVolatile(int modifiers) {
       return (modifiers & AccVolatile) != 0;
     }

     public boolean isExport(int modifiers) {
       return (modifiers & AccExport) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

    class Modifier
    {
      int modifiers;
      Annotation[] annotations;
      Modifier(int modifiers, Annotation[] annotations) {
        this.modifiers = modifiers;
        this.annotations = annotations;
      }
    }

    class MemberSelector {
      Expression[] typeArguments;
      Token id;
      MemberSelector(Expression[] typeArguments, Token id) {
        this.typeArguments = typeArguments;
        this.id = id;
      }
    }

   class IndexerPart {
     Expression pos;
     IndexerPart(Expression pos) {
       this.pos = pos;
     }
   }

   class CallArgument {
     Expression[] arguments;
     CallArgument(Expression[] arguments) {
       this.arguments = arguments;
     }
   }

   class NamePart
   {
   }

   class VariableDeclarator
   {
     Expression initialization;
     Token name;
     VariableDeclarator(Token name, Expression initialization){
       this.name = name;
       this.initialization = initialization;
     }
   }

   private long getTokenRange(Token token)
   {
     return ((long)token.sourceStart) << 32 + token.sourceEnd;
   }


   char[] getTokenText(Token token)
   {
     return token.image.toCharArray(); //jj_input_stream.GetImage().toCharArray(); //getTokenText(token);   }

  public static void main(String args[]) {
    Parser parser;
      try {
        parser = new Parser(new java.io.FileInputStream("Test.java"));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    try {
    	long start = System.currentTimeMillis();
      parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully." + "total time :  " + (System.currentTimeMillis() - start));
    } catch (ParseException e) {
      e.printStackTrace();
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

  public void initialize() {
         this.initialize(false);
   }
   public void initialize(boolean parsingCompilationUnit) {
    //positioning the parser for a new compilation unit
    //avoiding stack reallocation and all that....
    this.javadoc = null;
    this.compilationUnit = null;
    this.referenceContext = null;

    // recovery
    this.currentElement = null;
  }

        public CompilationUnitDeclaration dietParse(ICompilationUnit sourceUnit,
                        CompilationResult unitResult) {
          // TODO Auto-generated method stub
          return null;
        }

        public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit, boolean recordLineSeparator) {

      this.referenceContext = cd;
      this.compilationUnit = unit;

//      this.jj_input_stream.setBuffer(cd.bodyStart, cd.bodyEnd);

      try {
                ConstructorDeclaration();
      } catch (ParseException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
      }

    }
    // A P I
    public void parse(
      FieldDeclaration field,
      TypeDeclaration type,
      CompilationUnitDeclaration unit,
      char[] initializationSource) {

//      this.referenceContext = type;//      this.compilationUnit = unit;////      this.scanner.setSource(initializationSource);//      field.initialization = Expression();////      // mark field with local type if one was found during parsing//      if ((type.bits & ASTNode.HasLocalType) != 0) {//        field.bits |= ASTNode.HasLocalType;//      }
    }
        // A P I
        public CompilationUnitDeclaration parse(
          ICompilationUnit sourceUnit,
          CompilationResult compilationResult) {
//          // parses a compilation unit and manages error handling (even bugs....)//          return parse(sourceUnit, compilationResult, -1, -1/*parse without reseting the scanner*/);
        }

        // A P I
        public CompilationUnitDeclaration parse(
            ICompilationUnit sourceUnit,
            CompilationResult compilationResult,
            int start,
            int end) {
            // parses a compilation unit and manages error handling (even bugs....)

            CompilationUnitDeclaration unit;
            try {//                /* automaton initialization *///                initialize(true);//                goForCompilationUnit();//                /* unit creation */
                this.referenceContext =
                        this.compilationUnit =
                                new CompilationUnitDeclaration(
                                        this.problemReporter,
                                        compilationResult,
                                        0);
                /* scanners initialization */                char[] contents;                try {                    contents = this.readManager != null ? this.readManager.getContents(sourceUnit) : sourceUnit.getContents();                } catch(AbortCompilationUnit abortException) {                    problemReporter().cannotReadSource(this.compilationUnit, abortException, this.options.verbose);                    contents = CharOperation.NO_CHAR; // pretend empty from thereon                }                this.scanner.setSource(contents);                this.compilationUnit.sourceEnd = this.scanner.source.length - 1;                if (end != -1) this.scanner.resetTo(start, end);                if (this.javadocParser != null && this.javadocParser.checkDocComment) {                    this.javadocParser.scanner.setSource(contents);                    if (end != -1) {                        this.javadocParser.scanner.resetTo(start, end);                    }                }                /* run automaton */                try {
					CompilationUnit();
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}            } finally {                unit = this.compilationUnit;
                this.compilationUnit = null; // reset parser                // tag unit has having read bodies                if (!this.diet) unit.bits |= ASTNode.HasAllMethodBodies;            }
            return unit;
        }

        public void getMethodBodies(CompilationUnitDeclaration unit) {
            //fill the methods bodies in order for the code to be generated            if (unit == null) return;            if (unit.ignoreMethodBodies) {                unit.ignoreFurtherInvestigation = true;                return;                // if initial diet parse did not work, no need to dig into method bodies.            }            if ((unit.bits & ASTNode.HasAllMethodBodies) != 0)                return; //work already done ...            // save existing values to restore them at the end of the parsing process            // see bug 47079 for more details            int[] oldLineEnds = this.scanner.lineEnds;            int oldLinePtr = this.scanner.linePtr;            //real parse of the method....            CompilationResult compilationResult = unit.compilationResult;            char[] contents = this.readManager != null                    ? this.readManager.getContents(compilationResult.compilationUnit)                    : compilationResult.compilationUnit.getContents();            this.scanner.setSource(contents, compilationResult);            if (this.javadocParser != null && this.javadocParser.checkDocComment) {                this.javadocParser.scanner.setSource(contents);            }            if (unit.types != null) {                for (int i = 0, length = unit.types.length; i < length; i++)                    unit.types[i].parseMethods(this, unit);            }            // tag unit has having read bodies            unit.bits |= ASTNode.HasAllMethodBodies;
        }

        // A P I

        public void parse(
            Initializer initializer,
            TypeDeclaration type,
            CompilationUnitDeclaration unit) {

//            this.referenceContext = type;//            this.compilationUnit = unit;////            this.scanner.resetTo(initializer.bodyStart, initializer.bodyEnd); // just on the beginning {//            try {//                parse();//            } catch (AbortCompilation ex) {//                    this.lastAct = ERROR_ACTION;//            } finally {//                this.nestedMethod[this.nestedType]--;//                if(this.options.performStatementsRecovery) {//                    this.methodRecoveryActivated = oldMethodRecoveryActivated;//                }//            }////            //refill statements//            initializer.block.explicitDeclarations = this.realBlockStack[this.realBlockPtr--];//            int length;//            if (this.astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > 0) {//                System.arraycopy(this.astStack, (this.astPtr -= length) + 1, initializer.block.statements = new Statement[length], 0, length);//            } else {//                    // check whether this block at least contains some comment in it//                if (!containsComment(initializer.block.sourceStart, initializer.block.sourceEnd)) {//                    initializer.block.bits |= ASTNode.UndocumentedEmptyBlock;//                }//            }////            // mark initializer with local type if one was found during parsing//            if ((type.bits & ASTNode.HasLocalType) != 0) {//                initializer.bits |= ASTNode.HasLocalType;//            }
        }
        // A P I
        public void parse(MethodDeclaration md, CompilationUnitDeclaration unit) {

//            if (md.isAbstract())//                return;//            if (md.isNative())//                return;//            if ((md.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0)//                return;////            this.referenceContext = md;//            this.compilationUnit = unit;////            this.scanner.resetTo(md.bodyStart, md.bodyEnd);//            // reset the scanner to parser from { down to }//            try {//                parse();//            } catch (AbortCompilation ex) {//                this.lastAct = ERROR_ACTION;//            } finally {//                this.nestedMethod[this.nestedType]--;//                if(this.options.performStatementsRecovery) {//                        this.methodRecoveryActivated = oldMethodRecoveryActivated;//                }//            }////            if (this.lastAct == ERROR_ACTION) {//                md.bits |= ASTNode.HasSyntaxErrors;//                return;//            }////            //refill statements//            md.explicitDeclarations = this.realBlockStack[this.realBlockPtr--];//            int length;//            if (this.astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) != 0) {//                if (this.options.ignoreMethodBodies) {//                    // ignore statements//                    this.astPtr -= length;//                } else {//                    System.arraycopy(//                        this.astStack,//                        (this.astPtr -= length) + 1,//                        md.statements = new Statement[length],//                        0,//                        length);//                }//            } else {//                if (!containsComment(md.bodyStart, md.bodyEnd)) {//                        md.bits |= ASTNode.UndocumentedEmptyBlock;//                }//            }
        }
        public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int length, CompilationUnitDeclaration unit) {
//            boolean oldDiet = this.diet;//            boolean oldTolerateDefaultClassMethods = this.tolerateDefaultClassMethods;//            /* automaton initialization *///            initialize();//            goForClassBodyDeclarations();//            /* scanner initialization *///            this.scanner.setSource(source);//            this.scanner.resetTo(offset, offset + length - 1);//            if (this.javadocParser != null && this.javadocParser.checkDocComment) {//                    this.javadocParser.scanner.setSource(source);//                    this.javadocParser.scanner.resetTo(offset, offset + length - 1);//            }////            /* type declaration should be parsed as member type declaration *///            this.nestedType = 1;////            /* unit creation *///            TypeDeclaration referenceContextTypeDeclaration = new TypeDeclaration(unit.compilationResult);//            referenceContextTypeDeclaration.name = Util.EMPTY_STRING.toCharArray();//            referenceContextTypeDeclaration.fields = new FieldDeclaration[0];//            this.compilationUnit = unit;//            unit.types = new TypeDeclaration[1];//            unit.types[0] = referenceContextTypeDeclaration;//            this.referenceContext = unit;////            /* run automaton *///            try {//                this.diet = true;//                this.tolerateDefaultClassMethods = this.parsingJava8Plus;//                    parse();//            } catch (AbortCompilation ex) {//                this.lastAct = ERROR_ACTION;//            } finally {//                this.diet = oldDiet;//                this.tolerateDefaultClassMethods = oldTolerateDefaultClassMethods;//            }

            ASTNode[] result = null;
//            if (this.lastAct == ERROR_ACTION) {//                if (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery) {//                    return null;//                }//                // collect all body declaration inside the compilation unit except the default constructor//                final List bodyDeclarations = new ArrayList();//                ASTVisitor visitor = new ASTVisitor() {//                    public boolean visit(MethodDeclaration methodDeclaration, ClassScope scope) {//                        if (!methodDeclaration.isDefaultConstructor()) {//                            bodyDeclarations.add(methodDeclaration);//                        }//                        return false;//                    }//                    public boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope) {//                        bodyDeclarations.add(fieldDeclaration);//                        return false;//                    }//                    public boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope) {//                        bodyDeclarations.add(memberTypeDeclaration);//                        return false;//                    }//                };//                unit.ignoreFurtherInvestigation = false;//                unit.traverse(visitor, unit.scope);//                unit.ignoreFurtherInvestigation = true;//                result = (ASTNode[]) bodyDeclarations.toArray(new ASTNode[bodyDeclarations.size()]);//            } else {//                int astLength;//                if (this.astLengthPtr > -1 && (astLength = this.astLengthStack[this.astLengthPtr--]) != 0) {//                    result = new ASTNode[astLength];//                    this.astPtr -= astLength;//                    System.arraycopy(this.astStack, this.astPtr + 1, result, 0, astLength);//                } else {//                    // empty class body declaration (like ';' see https://bugs.eclipse.org/bugs/show_bug.cgi?id=280079).//                    result = new ASTNode[0];//                }//            }//            boolean containsInitializers = false;//            TypeDeclaration typeDeclaration = null;//            for (int i = 0, max = result.length; i < max; i++) {//                // parse each class body declaration//                ASTNode node = result[i];//                if (node instanceof TypeDeclaration) {//                    ((TypeDeclaration) node).parseMethods(this, unit);//                } else if (node instanceof AbstractMethodDeclaration) {//                    ((AbstractMethodDeclaration) node).parseStatements(this, unit);//                } else if (node instanceof FieldDeclaration) {//                    FieldDeclaration fieldDeclaration = (FieldDeclaration) node;//                    switch(fieldDeclaration.getKind()) {//                        case AbstractVariableDeclaration.INITIALIZER://                            containsInitializers = true;//                            if (typeDeclaration == null) {//                                typeDeclaration = referenceContextTypeDeclaration;//                            }//                            if (typeDeclaration.fields == null) {//                                typeDeclaration.fields = new FieldDeclaration[1];//                                typeDeclaration.fields[0] = fieldDeclaration;//                            } else {//                                int length2 = typeDeclaration.fields.length;//                                FieldDeclaration[] temp = new FieldDeclaration[length2 + 1];//                                System.arraycopy(typeDeclaration.fields, 0, temp, 0, length2);//                                temp[length2] = fieldDeclaration;//                                typeDeclaration.fields = temp;//                            }//                            break;//                    }//                }//                if (((node.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {//                    return null;//                }//            }//            if (containsInitializers) {//                FieldDeclaration[] fieldDeclarations = typeDeclaration.fields;//                for (int i = 0, max = fieldDeclarations.length; i < max; i++) {//                    Initializer initializer = (Initializer) fieldDeclarations[i];//                    initializer.parseStatements(this, typeDeclaration , unit);//                    if (((initializer.bits & ASTNode.HasSyntaxErrors) != 0) && (!this.options.performMethodsFullRecovery && !this.options.performStatementsRecovery)) {//                            return null;//                    }//                }//            }
            return result;
        }

        public Expression parseLambdaExpression(char[] source, int offset, int length, CompilationUnitDeclaration unit, boolean recordLineSeparators) {
//            this.haltOnSyntaxError = true; // unexposed/unshared object, no threading concerns.//            return parseExpression(source, offset, length, unit, recordLineSeparators);
                        return null;
        }

        public Expression parseExpression(char[] source, int offset, int length, CompilationUnitDeclaration unit, boolean recordLineSeparators) {

//            initialize();//            goForExpression(recordLineSeparators);//            this.nestedMethod[this.nestedType]++;////            this.referenceContext = unit;//            this.compilationUnit = unit;////            this.scanner.setSource(source);//            this.scanner.resetTo(offset, offset + length - 1);//            try {//                parse();//            } catch (AbortCompilation ex) {//                    this.lastAct = ERROR_ACTION;//            } finally {//                this.nestedMethod[this.nestedType]--;//            }////            if (this.lastAct == ERROR_ACTION) {//                return null;//            }////            return this.expressionStack[this.expressionPtr];
                try {
                                return Expression();
                        } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }

                        return null;
        }
        public Expression parseMemberValue(char[] source, int offset, int length, CompilationUnitDeclaration unit) {

//            initialize();//            goForMemberValue();//            this.nestedMethod[this.nestedType]++;////            this.referenceContext = unit;//            this.compilationUnit = unit;////            this.scanner.setSource(source);//            this.scanner.resetTo(offset, offset + length - 1);//            try {//                parse();//            } catch (AbortCompilation ex) {//                this.lastAct = ERROR_ACTION;//            } finally {//                this.nestedMethod[this.nestedType]--;//            }////            if (this.lastAct == ERROR_ACTION) {//                return null;//            }////            return this.expressionStack[this.expressionPtr];
            try {
                                return Expression();
                        } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                        return null;
        }
        public void parseStatements(ReferenceContext rc, int start, int end, TypeDeclaration[] types, CompilationUnitDeclaration unit) {
//            boolean oldStatementRecoveryEnabled = this.statementRecoveryActivated;//            this.statementRecoveryActivated = true;////            initialize();////            goForBlockStatementsopt();//            this.nestedMethod[this.nestedType]++;//            pushOnRealBlockStack(0);////            pushOnAstLengthStack(0);////            this.referenceContext = rc;//            this.compilationUnit = unit;////            this.pendingRecoveredType = null;////            if(types != null && types.length > 0) {//                this.recoveredTypes = types;//                this.recoveredTypePtr = 0;//                this.nextTypeStart =//                        this.recoveredTypes[0].allocation == null//                                ? this.recoveredTypes[0].declarationSourceStart//                                                : this.recoveredTypes[0].allocation.sourceStart;//            } else {//                this.recoveredTypes = null;//                this.recoveredTypePtr = -1;//                this.nextTypeStart = -1;//            }////            this.scanner.resetTo(start, end);//            // reset the scanner to parser from { down to }////            this.lastCheckPoint = this.scanner.initialPosition;//////            this.stateStackTop = -1;////            try {//                parse();//            } catch (AbortCompilation ex) {//                    this.lastAct = ERROR_ACTION;//            } finally {//                this.nestedMethod[this.nestedType]--;//                this.recoveredTypes = null;//                this.statementRecoveryActivated = oldStatementRecoveryEnabled;//            }////            checkNonNLSAfterBodyEnd(end);
        }
        public void persistLineSeparatorPositions() {
//            if (this.scanner.recordLineSeparator) {//                this.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();//            }
        }

        /**
	 * Returns this parser's problem reporter initialized with its reference context.
	 * Also it is assumed that a problem is going to be reported, so initializes
	 * the compilation result's line positions.
	 *
	 * @return ProblemReporter
	 */
        public ProblemReporter problemReporter(){
//		if (this.scanner.recordLineSeparator) {//			this.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();//		}
                this.problemReporter.referenceContext = this.referenceContext;
                return this.problemReporter;
        }

        public MethodDeclaration convertToMethodDeclaration(ConstructorDeclaration c, CompilationResult compilationResult) {
                MethodDeclaration m = new MethodDeclaration(compilationResult);
                m.typeParameters = c.typeParameters;
                m.sourceStart = c.sourceStart;
                m.sourceEnd = c.sourceEnd;
                m.bodyStart = c.bodyStart;
                m.bodyEnd = c.bodyEnd;
                m.declarationSourceEnd = c.declarationSourceEnd;
                m.declarationSourceStart = c.declarationSourceStart;
                m.selector = c.selector;
                m.statements = c.statements;
                m.modifiers = c.modifiers;
                m.annotations = c.annotations;
                m.arguments = c.arguments;
                m.thrownExceptions = c.thrownExceptions;
                m.explicitDeclarations = c.explicitDeclarations;
                m.returnType = null;
                m.javadoc = c.javadoc;
                m.bits = c.bits;
                return m;
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
/*
 * Program structuring syntax follows.
 */
// starting point for parsing a java file
//CompilationUnitDeclaration CompilationUnit()://{//  CompilationUnitDeclaration unit= new CompilationUnitDeclaration();//  String name = null;//  ModuleDeclaration module = null;//  Element element = null;//}//{//  [ LOOKAHEAD( ( Annotation() )* <PACKAGE> ) PackageDeclaration(unit) ]//  ( ImportDeclaration(unit) )*//  <MODULE> <IDENTIFIER> <LBRACE>//  {//	module = new ModuleDeclaration(unit);//  }//	  (LOOKAHEAD(2) element = ObjectElement()//	  {//	    module.element = element;//	  })? //	  ( ModuleBlock(module) )*//  <RBRACE>//  ( < "" > )?//  ( <STUFF_TO_IGNORE: ~[]> )?//  <EOF>//  {//	return unit;//  }//}////void ModuleBlock(ModuleDeclaration module)://{//  Statement statement = null;//  List<LocalDeclaration > declarations = null;//  boolean export = false;//}//{//  LOOKAHEAD(3)//  declarations = LocalVariableDeclaration()//  {//    module.contents.addAll(declarations);//  }//  | LOOKAHEAD(3) statement = Statement()//  {//    module.contents.add(statement);//  }//  | statement = TypeDeclaration()//  {//    module.contents.add(statement);//  }//  | (<EXPOR>{ export = true; })? statement = MethodDeclaration() //  	{//  	  if(export)//  	  {//        statement.bits |= ModifierSet.EXPORT;//  	  }//      module.contents.add(statement);//    }//}////Element Element()://{//   Element result = null, child = null;//}//{//	 LOOKAHEAD(2)//	 child = ObjectElement()//	 {//	   result.addElement(child);//	 }//   	|//     child = AttributeElement()//     {//       result.addElement(child);//     }//  {//      return result;//  }//}////Element ObjectElement()://{//  ObjectElement result = null;//}//{//    <LESS> Type() ( AbstractAttribute())* ((<GREATER> //       // (element | ~<LESS>)*//        (Element())*// //    <CLOSE_TAG>  Type() <GREATER>) | <SIMPLE_CLOSE_TAG>)//  {//      return result;//  }//}//////////fragment PCDATA : (~<LESS>)* ;////Element AttributeElement()://{//  Element result = null;//}//{ //    <LESS> <LPAREN> Type()<RPAREN> <DOT> Name() ((<GREATER>//        ( Element())*//    <CLOSE_TAG> <LPAREN> Type() <RPAREN> <DOT> Name() <GREATER>) |  <SIMPLE_CLOSE_TAG>)//  {//      return result;//  }//}////AbstractAttribute AbstractAttribute()://{//	AbstractAttribute result = null;//}//{//  //    result = GeneralAttribute()//    |result = AttachAttribute()//  {//      return result;//  }//}////AbstractAttribute AttachAttribute()://{//	AbstractAttribute result = null;//}//{//    <LPAREN>Type()<RPAREN> <DOT> Name()<EQUAL> PropertyExpression()//  {//      return result;//  }//}////AbstractAttribute GeneralAttribute()://{//}//{//	Name() <EQUAL> PropertyExpression()//  {//      return result;//  }//}////Expression MarkupExtenson()://{//  Expression result = null;//}//{//   <LBRACE>//        Type()//        ( AbstractAttribute())* //    <RBRACE>//  {//      return result;//  }//}////Expression PropertyExpression()://{//	Expression result = null;//}//   {//      <STRING_LITERAL> //    |MarkupExtenson()//  {//      return result;//  }//}
  final public CompilationUnitDeclaration CompilationUnit() throws ParseException {
  ImportReference currentPkg = null;
  ImportReference[] imports = null;
  ImportReference importRef = null;
  TypeDeclaration[] types = null; //new TypeDeclaration[0];
  TypeDeclaration type = null;
  int length = 0;
    if (jj_2_1(2147483647)) {
      currentPkg = PackageDeclaration();
    } else {
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_1;
      }
      importRef = ImportDeclaration();
    if(imports == null) {
      imports = new ImportReference[1];
      imports[0] = importRef;
    } else
    {
      length = imports.length;
      System.arraycopy(imports, 0, imports = new ImportReference[length + 1], 0, length);
      imports[length] = importRef;
    }
    }
    label_2:
    while (true) {
      type = TypeDeclaration();
    if(types == null) {
      types = new TypeDeclaration[1];
      types[0] = type;
    } else {
      length = types.length;
      System.arraycopy(types, 0, types = new TypeDeclaration[length + 1], 0, length);
      types[length] = type;
    }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 144:
      jj_consume_token(144);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      jj_consume_token(STUFF_TO_IGNORE);
      break;
    default:
      ;
    }
    jj_consume_token(0);
    CompilationUnitDeclaration unit = new CompilationUnitDeclaration(this.problemReporter, this.compilationResult, types[types.length-1].sourceEnd);
        unit.currentPackage = currentPkg;
        unit.imports = imports;
        unit.types = types;
    {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

//ImportReference PackageDeclaration(CompilationUnitDeclaration unit)://{//  Modifier modifier = null;//}//{//  modifier = Modifiers() <PACKAGE> Name() <SEMICOLON>//  {//    //  }//}

//ImportReference PackageDeclaration(CompilationUnitDeclaration unit)://{//  Annotation[] annotations = null;//  Annotation annotation = null;//}//{//  ( Annotation() )* <PACKAGE> Name() <SEMICOLON>//  {//    //  }//}////ImportReference ImportDeclaration(CompilationUnitDeclaration unit)://{}//{//  <IMPORT> [ "static" ] Name() [ "." <MULTIPLY> ] <SEMICOLON>//}
  final public ImportReference PackageDeclaration() throws ParseException {
  Annotation[] annotations = null;
  Annotation annotation = null;
  Token token = null;
  char[][] tokens = new char[1][];
  long[] positions = new long[1];
  int length = 0;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        break label_3;
      }
      annotation = Annotation();
    if(annotations == null) {
      annotations = new Annotation[0];
      annotations[0] = annotation;
    } else {
      length = annotations.length;
      System.arraycopy(annotations, 0, annotations = new Annotation[length + 1], 0, length);
      annotations[length] = annotation;
    }
    }
    jj_consume_token(PACKAGE);
    token = jj_consume_token(IDENTIFIER);
    tokens[0] = getTokenText(token);
    positions[0] = getTokenRange(token);
    label_4:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      token = jj_consume_token(IDENTIFIER);
    length = tokens.length;
    System.arraycopy(tokens, 0 , tokens = new char[length + 1][], 0, length);
    tokens[length] = getTokenText(token);
    System.arraycopy(positions, 0 , positions = new long[length + 1], 0, length);
    positions[length] = getTokenRange(token);
    }
    jj_consume_token(SEMICOLON);
    ImportReference result =  new ImportReference(tokens, positions, false, ClassFileConstants.AccDefault);
    result.annotations = annotations;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ImportReference ImportDeclaration() throws ParseException {
  Token token = null;
  char[][] tokens = new char[1][];
  long[] positions = new long[1];
  int length = 0;
  boolean isStatic = false;
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
    isStatic = true;
      break;
    default:
      ;
    }
    token = jj_consume_token(IDENTIFIER);
    tokens[0] = getTokenText(token);
    positions[0] = getTokenRange(token);
    label_5:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(DOT);
      token = jj_consume_token(IDENTIFIER);
    length = tokens.length;
    System.arraycopy(tokens, 0 , tokens = new char[length + 1][], 0, length);
    tokens[length] = getTokenText(token);
    System.arraycopy(positions, 0 , positions = new long[length + 1], 0, length);
    positions[length] = getTokenRange(token);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(MULTIPLY);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new ImportReference(tokens, positions, true, ClassFileConstants.AccDefault);}
    throw new Error("Missing return statement in function");
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
//int Modifiers()://{//   int modifiers = 0; Annotation[] annotations = null;//}//{// (//  LOOKAHEAD(2)//  (//   <PUBLIC> { modifiers |= ModifierSet.PUBLIC; }//  |//   "static" { modifiers |= ModifierSet.STATIC; }//  |//   "protected" { modifiers |= ModifierSet.PROTECTED; }//  |//   "private" { modifiers |= ModifierSet.PRIVATE; }//  |//   "final" { modifiers |= ModifierSet.FINAL; }//  |//   "abstract" { modifiers |= ModifierSet.ABSTRACT; }//  |//   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }//  |//   "native" { modifiers |= ModifierSet.NATIVE; }//  |//   "transient" { modifiers |= ModifierSet.TRANSIENT; }//  |//   "volatile" { modifiers |= ModifierSet.VOLATILE; }//  |//   "strictfp" { modifiers |= ModifierSet.STRICTFP; }//  |//   annotation = Annotation()//   {//     annotations.add(annotation);//   }//  )// )*//// {//    return modifiers;// }//}
  final public Modifier Modifiers() throws ParseException {
   int modifiers = 0, length = 0; Annotation[] annotations = null; Annotation annotation = null;
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
              modifiers |= ModifierSet.AccPublic;
        break;
      case STATIC:
        jj_consume_token(STATIC);
              modifiers |= ModifierSet.AccStatic;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                 modifiers |= ModifierSet.AccProtected;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
               modifiers |= ModifierSet.AccPrivate;
        break;
      case FINAL:
        jj_consume_token(FINAL);
             modifiers |= ModifierSet.AccFinal;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                modifiers |= ModifierSet.AccAbstract;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                    modifiers |= ModifierSet.AccSynchronized;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
              modifiers |= ModifierSet.AccNative;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
                 modifiers |= ModifierSet.AccTransient;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
                modifiers |= ModifierSet.AccVolatile;
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
                modifiers |= ModifierSet.AccStrictfp;
        break;
      case AT:
        annotation = Annotation();
     if(annotations == null) {
       annotations = new Annotation[0];
     } else
     {
       length = annotations.length;
       System.arraycopy(annotations, 0, annotations = new Annotation[length + 1], 0, length);
       annotations[length] = annotation;
     }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Modifier(modifiers, annotations);}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public TypeDeclaration TypeDeclaration() throws ParseException {
   Modifier modifier;
   TypeDeclaration typeDecl = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifier = Modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        typeDecl = ClassOrInterfaceDeclaration();
        break;
      case ENUM:
        typeDecl = EnumDeclaration();
        break;
      case AT:
        typeDecl = AnnotationTypeDeclaration();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    typeDecl.modifiers |= modifier.modifiers;
    typeDecl.annotations = modifier.annotations;
    {if (true) return typeDecl;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration ClassOrInterfaceDeclaration() throws ParseException {
   boolean isInterface = false;
   TypeDeclaration typeDecl = new TypeDeclaration(this.compilationResult);
   TypeParameter[]  typePars = null;
   TypeReference[]  types = null;
   Token id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
             typeDecl.modifiers |= TypeDeclaration.CLASS_DECL;
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                                                                                 isInterface = true; typeDecl.modifiers |= TypeDeclaration.INTERFACE_DECL;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    id = jj_consume_token(IDENTIFIER);
    typeDecl.name = getTokenText(id);
    typeDecl.sourceStart = id.sourceStart;
    typeDecl.sourceEnd = id.sourceEnd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      typePars = TypeParameters();
    typeDecl.typeParameters = typePars;
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      types = ExtendsList(isInterface);
    if(isInterface)
    {
      typeDecl.superInterfaces = types;
    } else {
      typeDecl.superclass = types[0];
    }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      types = ImplementsList(isInterface);
    typeDecl.superInterfaces = types;
      break;
    default:
      ;
    }
    ClassOrInterfaceBody(isInterface, typeDecl);
        {if (true) return typeDecl;}
    throw new Error("Missing return statement in function");
  }

  final public TypeReference[] ExtendsList(boolean isInterface) throws ParseException {
   boolean extendsMoreThanOne = false;
   TypeReference[] baseTypes = new TypeReference[1];
   TypeReference type = null;
   int length = 0;
    jj_consume_token(EXTENDS);
    type = ClassOrInterfaceType();
     baseTypes[0] = type;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(COMMA);
      type = ClassOrInterfaceType();
     extendsMoreThanOne = true;
     length = baseTypes.length;
     System.arraycopy(baseTypes, 0, baseTypes = new TypeReference[length + 1], 0, length);
     baseTypes[length] = type;
    }
      if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}

      {if (true) return baseTypes;}
    throw new Error("Missing return statement in function");
  }

  final public TypeReference[] ImplementsList(boolean isInterface) throws ParseException {
   TypeReference[] baseTypes = new TypeReference[1];
   TypeReference type = null;
   int length = 0;
    jj_consume_token(IMPLEMENTS);
    type = ClassOrInterfaceType();
     baseTypes[0] = type;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_8;
      }
      jj_consume_token(COMMA);
      type = ClassOrInterfaceType();
     length = baseTypes.length;
     System.arraycopy(baseTypes, 0, baseTypes = new TypeReference[length + 1], 0, length);
     baseTypes[length] = type;
    }
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}

      {if (true) return baseTypes;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration EnumDeclaration() throws ParseException {
  TypeDeclaration typeDecl = null;
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(false);
      break;
    default:
      ;
    }
    EnumBody(typeDecl);
    {if (true) return typeDecl;}
    throw new Error("Missing return statement in function");
  }

  final public void EnumBody(TypeDeclaration typeDecl) throws ParseException {
  FieldDeclaration[] fields = null; FieldDeclaration field = null; int length = 0;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      field = EnumConstant(typeDecl);
      label_9:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COMMA);
        field = EnumConstant(typeDecl);
     if(fields == null)
     {
       fields = new FieldDeclaration[1];
       fields[0] = field;
     }else
     {
       length = fields.length;
       System.arraycopy(fields, 0, fields = new FieldDeclaration[length + 1], 0, length);
       fields[length] = field;
     }
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case EVENT:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LESS:
          ;
          break;
        default:
          break label_10;
        }
        ClassOrInterfaceBodyDeclaration(false, typeDecl);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public FieldDeclaration EnumConstant(TypeDeclaration typeDecl) throws ParseException {
        Modifier modifier = null; Token id = null;
        Expression[] arguments = null;
    modifier = Modifiers();
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      arguments = Arguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassOrInterfaceBody(false, typeDecl);
      break;
    default:
      ;
    }
    {if (true) return new FieldDeclaration(getTokenText(id), id.sourceStart, id.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter[] TypeParameters() throws ParseException {
  TypeParameter[] result = new TypeParameter[1];
  TypeParameter typeParameter = null;
  int length = 0;
    jj_consume_token(LESS);
    typeParameter = TypeParameter();
     result[0] = typeParameter;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(COMMA);
      typeParameter = TypeParameter();
     length = result.length;
     System.arraycopy(result, 0, result = new TypeParameter[length + 1], 0, length);
     result[length] = typeParameter;
    }
    jj_consume_token(GREATER);
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
  Token id = null;
  TypeReference[] bounds = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
      break;
    case QUESTION:
      id = jj_consume_token(QUESTION);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      bounds = TypeBound();
      break;
    default:
      ;
    }
     TypeParameter result = new TypeParameter();
     result.name = getTokenText(id);
     result.sourceStart = id.sourceStart;
         result.bounds = bounds;
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeReference[] TypeBound() throws ParseException {
 TypeReference[] result = new TypeReference[1];
 TypeReference type = null;
 int length = 0;
    jj_consume_token(EXTENDS);
    type = ClassOrInterfaceType();
     result[0] = type;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(AND);
      type = ClassOrInterfaceType();
     length = result.length;
     System.arraycopy(result, 0, result = new TypeReference[length + 1], 0, length);
     result[length] = type;
    }
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void ClassOrInterfaceBody(boolean isInterface, TypeDeclaration typeDecl) throws ParseException {
  Token rBrace= null, lBrace = null;
    lBrace = jj_consume_token(LBRACE);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case EVENT:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LESS:
        ;
        break;
      default:
        break label_13;
      }
      ClassOrInterfaceBodyDeclaration(isInterface, typeDecl);
    }
    rBrace = jj_consume_token(RBRACE);
    typeDecl.bodyStart = lBrace.sourceStart;
    typeDecl.bodyEnd = rBrace.sourceEnd;
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface, TypeDeclaration typeDecl) throws ParseException {
   boolean isNestedInterface = false;
   Modifier modifier;
   AbstractMethodDeclaration methodDecl = null;
   FieldDeclaration[] fields = null;
   PropertyDeclaration propDecl = null;
   EventDeclaration eventDecl = null;
   IndexerDeclaration indexerDecl = null;
   int length = 0;
    if (jj_2_10(2)) {
      Initializer();
     if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case EVENT:
      case IDENTIFIER:
      case LPAREN:
      case AT:
      case LESS:
        modifier = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration();
          break;
        case ENUM:
          EnumDeclaration();
          break;
        default:
          if (jj_2_6(2147483647)) {
            methodDecl = ConstructorDeclaration();
        if(typeDecl.methods == null)
        {
          typeDecl.methods = new AbstractMethodDeclaration[1];
          typeDecl.methods[0] = methodDecl;
        } else {
          System.arraycopy(typeDecl.methods, 0, typeDecl.methods = new AbstractMethodDeclaration[length + 1], 0, length);
          typeDecl.methods[length] = methodDecl;
        }
          } else if (jj_2_7(2147483647)) {
            indexerDecl = IndexerDeclaration();
        if(typeDecl.indexers == null)
        {
          typeDecl.indexers = new IndexerDeclaration[1];
          typeDecl.indexers[0] = indexerDecl;
        } else {
          length  = typeDecl.indexers.length;
          System.arraycopy(typeDecl.indexers, 0, typeDecl.indexers = new IndexerDeclaration[length + 1], 0, length);
          typeDecl.indexers[length] = indexerDecl;
        }
          } else if (jj_2_8(2147483647)) {
            fields = FieldDeclaration(modifier);
        if(typeDecl.fields == null)
        {
          typeDecl.fields = fields;
        } else {
          length  = typeDecl.fields.length;
          System.arraycopy(typeDecl.fields, 0, typeDecl.fields = new FieldDeclaration[length + fields.length], 0, length);
          System.arraycopy(fields, 0, typeDecl.fields, length, fields.length);
        }
          } else if (jj_2_9(2147483647)) {
            propDecl = PropertyDeclaration();
        propDecl.modifiers = modifier.modifiers;
        propDecl.annotations = modifier.annotations;
        if(typeDecl.properties == null)
        {
          typeDecl.properties = new PropertyDeclaration[1];
          typeDecl.properties[0] = propDecl;
        } else {
          length  = typeDecl.properties.length;
          System.arraycopy(typeDecl.properties, 0, typeDecl.properties = new PropertyDeclaration[length + 1], 0, length);
          typeDecl.properties[length] = propDecl;
        }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EVENT:
              eventDecl = EventDeclaration();
        eventDecl.modifiers = modifier.modifiers;
        eventDecl.annotations = modifier.annotations;
        if(typeDecl.properties == null)
        {
          typeDecl.events = new EventDeclaration[1];
          typeDecl.events[0] = eventDecl;
        } else {
          length  = typeDecl.events.length;
          System.arraycopy(typeDecl.events, 0, typeDecl.events = new EventDeclaration[length + 1], 0, length);
          typeDecl.events[length] = eventDecl;
        }
              break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LPAREN:
            case LESS:
              methodDecl = MethodDeclaration();
        methodDecl.modifiers = modifier.modifiers;
        methodDecl.annotations = modifier.annotations;
        if(typeDecl.methods == null)
        {
          typeDecl.methods = new AbstractMethodDeclaration[1];
          typeDecl.methods[0] = methodDecl;
        } else {
          length = typeDecl.methods.length;
          System.arraycopy(typeDecl.methods, 0, typeDecl.methods = new AbstractMethodDeclaration[length + 1], 0, length);
          typeDecl.methods[length] = methodDecl;
        }
              break;
            case AT:
              AnnotationTypeDeclaration();
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public IndexerDeclaration IndexerDeclaration() throws ParseException {
  TypeReference type = null;
  Argument argument = null; Argument[] arguments = new Argument[1]; int length = 0;
  Block setter = null, getter = null;
  Token lBracket = null, rBracket = null;
    type = Type();

    jj_consume_token(THIS);
    lBracket = jj_consume_token(LBRACKET);
    argument = FormalParameter();
      arguments[0] = argument;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_14;
      }
      jj_consume_token(COMMA);
      argument = FormalParameter();
      length = arguments.length;
      System.arraycopy(arguments, 0, arguments = new Argument[length + 1], 0 ,length);
      arguments[length] = argument;
    }
    rBracket = jj_consume_token(RBRACKET);
    jj_consume_token(LBRACE);
    jj_consume_token(GET);
    getter = Block();
    jj_consume_token(SET);
    setter = Block();
    jj_consume_token(RBRACE);
          {if (true) return new IndexerDeclaration(type, arguments, getter, setter, lBracket.sourceStart, rBracket.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDeclaration PropertyDeclaration() throws ParseException {
  TypeReference type = null;
  Token id = null;
  Block setter = null, getter = null;
    type = Type();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    jj_consume_token(GET);
    getter = Block();
    jj_consume_token(SET);
    setter = Block();
    jj_consume_token(RBRACE);
    {if (true) return new PropertyDeclaration(type, getTokenText(id), getter, setter, id.sourceStart, id.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public EventDeclaration EventDeclaration() throws ParseException {
  TypeReference type = null;
  Token id = null;
  Block add = null, remove = null;
    jj_consume_token(EVENT);
    type = Type();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    jj_consume_token(ADD);
    add = Block();
    jj_consume_token(REMOVE);
    remove = Block();
    jj_consume_token(RBRACE);
      {if (true) return new EventDeclaration(type, getTokenText(id), add, remove, id.sourceStart, id.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration[] FieldDeclaration(Modifier modifier) throws ParseException {
  FieldDeclaration[] fieldDecls = new FieldDeclaration[1];
  TypeReference type = null;
  VariableDeclarator vd = null;
  int length = 0;
    // Modifiers are already matched in the caller
      type = Type();
    vd = VariableDeclarator();
    fieldDecls[0] = new FieldDeclaration(getTokenText(vd.name), vd.name.sourceStart, vd.name.sourceEnd);
    fieldDecls[0].type = type;
    fieldDecls[0].initialization = vd.initialization;
    fieldDecls[0].modifiers = modifier.modifiers;
    fieldDecls[0].annotations = modifier.annotations;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_15;
      }
      jj_consume_token(COMMA);
      vd = VariableDeclarator();
    length = fieldDecls.length;

    System.arraycopy(fieldDecls, 0, fieldDecls = new FieldDeclaration[length + 1], 0, length);
    fieldDecls[length] = new FieldDeclaration(getTokenText(vd.name), vd.name.sourceStart, vd.name.sourceEnd);
    fieldDecls[length].type = type;
    fieldDecls[length].initialization = vd.initialization;
    fieldDecls[length].modifiers = modifier.modifiers;
    fieldDecls[length].annotations = modifier.annotations;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return fieldDecls;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
  Expression initialization = null;
  Token name = null;
    name = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      initialization = VariableInitializer();
      break;
    default:
      ;
    }
    {if (true) return new VariableDeclarator(name, initialization);}
    throw new Error("Missing return statement in function");
  }

  final public Token VariableDeclaratorId() throws ParseException {
        Token id = null;
    id = jj_consume_token(IDENTIFIER);
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Expression VariableInitializer() throws ParseException {
  Expression result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      result = ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      result = Expression();
    {if (true) return result;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer() throws ParseException {
  Expression expression = null;
  Expression[] expressions = null; int length = 0;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      expression = VariableInitializer();
    expressions = new Expression[1];
    expressions[0] = expression;
      label_16:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA);
        expression = VariableInitializer();
    length = expressions.length;
    System.arraycopy(expressions, 0, expressions = new Expression[length + 1], 0, length);
    expressions[length] = expression;
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
    ArrayInitializer result = new ArrayInitializer();
    result.expressions = expressions;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
  TypeParameter[] typeParameters = null;
  TypeReference type = null;
  Block block = null;
  NameReference[] nameReferences = null;
  MethodDeclaration result = new MethodDeclaration(this.compilationResult);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      typeParameters = TypeParameters();
      break;
    default:
      ;
    }
    type = ResultType();
    MethodDeclarator(result);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      nameReferences = NameList();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block = Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    result.returnType = type;
    result.typeParameters = typeParameters;
    result.statements = block.statements;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void MethodDeclarator(MethodDeclaration result) throws ParseException {
  Token id = null;
  Argument[] arguments = null;
    id = jj_consume_token(IDENTIFIER);
    arguments = FormalParameters();
    result.arguments = arguments;
    result.sourceStart = id.sourceStart;
    result.sourceEnd = id.sourceEnd;
  }

  final public Argument[] FormalParameters() throws ParseException {
  Argument argument = null;
  Argument[] result = null;
  int length = 0;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case LPAREN:
    case AT:
      argument = FormalParameter();
    result = new Argument[1];
    result[0] = argument;
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_17;
        }
        jj_consume_token(COMMA);
        argument = FormalParameter();
    length = result.length;
    System.arraycopy(result, 0, result = new Argument[length + 1], 0, length);
    result[length] = argument;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Argument FormalParameter() throws ParseException {
  Modifier modifier = null;
  TypeReference type = null;
  Token id = null;
  boolean isVarArgs = false;
    // danson, added
      //          [ "final" | Annotation() ]
      // See Java Language Specification, 3rd Edition, section 8.4.1
      modifier = Modifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case AT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
    isVarArgs = true;
      break;
    default:
      ;
    }
    id = VariableDeclaratorId();
    Argument result = new Argument(getTokenText(id), getTokenRange(id), type, modifier.modifiers);
    result.annotations = modifier.annotations;
    result.type.bits |= ASTNode.IsVarArgs; // set isVarArgs

    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
  TypeParameter[] typeParameters = null;
  Argument[] arguments = null;
  Token token = null;
  Statement[] statements = null; Statement statement = null; int length = 0;
  ExplicitConstructorCall constructorCall = null;
  ConstructorDeclaration result = new ConstructorDeclaration(this.compilationResult);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      typeParameters = TypeParameters();
      break;
    default:
      ;
    }
    // Modifiers matched in the caller
      token = jj_consume_token(IDENTIFIER);
    arguments = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_12(2147483647)) {
      constructorCall = ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case PLUS_PLUS:
      case MINUS_MINUS:
        ;
        break;
      default:
        break label_18;
      }
      statements = BlockStatement();
      if(result.statements==null)
      {
                result.statements = statements;
      } else {
        length = result.statements.length;
        System.arraycopy(result.statements, 0, result.statements = new Statement[length + statements.length], 0, length);
        System.arraycopy(statements, 0, result.statements, length, statements.length);
      }
    }
    jj_consume_token(RBRACE);
    result.selector = getTokenText(token);
    result.arguments = arguments;
        result.typeParameters = typeParameters;
        result.sourceStart = token.sourceStart;
        result.sourceEnd = token.sourceEnd;
        if(constructorCall !=null) {
          result.constructorCall = constructorCall;
        } else {
          result.constructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);
        }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

//	public final static int ImplicitSuper = 1;//	public final static int Super = 2;//	public final static int This = 3;
  final public ExplicitConstructorCall ExplicitConstructorInvocation() throws ParseException {
  int accessMode = 1;
  Expression[] arguments = null;
  TypeReference[] typeArguments = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      typeArguments = TypeArguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
    accessMode = ExplicitConstructorCall.This;
      break;
    case SUPER:
      jj_consume_token(SUPER);
    accessMode = ExplicitConstructorCall.Super;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    arguments = Arguments();
    jj_consume_token(SEMICOLON);
    ExplicitConstructorCall explicitCall = new ExplicitConstructorCall(accessMode);
    explicitCall.typeArguments = typeArguments;
    explicitCall.arguments = arguments;
    {if (true) return explicitCall;}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
  boolean isStatic = false;
  Block block = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
    isStatic = true;
      break;
    default:
      ;
    }
    block = Block();
    {if (true) return new Initializer(block, isStatic ? ClassFileConstants.AccStatic : 0);}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public TypeReference Type() throws ParseException {
  TypeReference type = null;
    if (jj_2_13(2)) {
      type = ReferenceType();
     {if (true) return type;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        type = PrimitiveType();
     {if (true) return type;}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeReference ReferenceType() throws ParseException {
  TypeReference type = null;
  int dims = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType();
      label_19:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
     dims++;
        if (jj_2_14(2)) {
          ;
        } else {
          break label_19;
        }
      }
     {if (true) return new ArrayTypeReference(type.getTypeName()[0], dims, type.sourceStart << 32 + type.sourceEnd);}
      break;
    case IDENTIFIER:
      type = ClassOrInterfaceType();
      label_20:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
     dims++;
      }
      break;
    case LPAREN:
      type = FunctionType();
      label_21:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
    dims++;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(dims > 0) {
      {if (true) return new ArrayTypeReference(type.getTypeName()[0], dims, type.sourceStart << 32 + type.sourceEnd);}
    } else  {
      {if (true) return type;}
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeReference ClassOrInterfaceType() throws ParseException {
  char[][]  qualifiedNames = new char[1][];
  Token id = null;
  TypeReference[] typeRef = null;
  TypeReference[][] typeRefs = new TypeReference[1][];
  boolean generic = false;
  long[] sourcePositions = new long[1];
  int length = 0;
    id = jj_consume_token(IDENTIFIER);
    qualifiedNames[0] = getTokenText(id);
    sourcePositions[0] = getTokenRange(id);
    if (jj_2_17(2)) {
      typeRef = TypeArguments();
    generic = true;
    typeRefs[0] = typeRef;
    } else {
      ;
    }
    label_22:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(DOT);
      id = jj_consume_token(IDENTIFIER);
    length = qualifiedNames.length;
    System.arraycopy(qualifiedNames, 0, qualifiedNames = new char[length + 1][], 0, length);
    System.arraycopy(typeRefs, 0, typeRefs = new TypeReference[length + 1][], 0, length);
    System.arraycopy(sourcePositions, 0, sourcePositions = new long[length + 1], 0, length);
    qualifiedNames[length] = getTokenText(id);
    sourcePositions[length] = getTokenRange(id);
      if (jj_2_19(2)) {
        typeRef = TypeArguments();
    generic = true;
    typeRefs[length] = typeRef;
      } else {
        ;
      }
    }
    if(generic) {
      if(length == 0) {
        {if (true) return new ParameterizedSingleTypeReference(qualifiedNames[0], typeRef, 0, sourcePositions[0]);}
      } else {
        {if (true) return new ParameterizedQualifiedTypeReference(qualifiedNames, typeRefs, 0, sourcePositions);}
      }
        } else {
          if(length == 0){
            {if (true) return new SingleTypeReference(qualifiedNames[0], sourcePositions[0]);}
          } else {
            {if (true) return new QualifiedTypeReference(qualifiedNames, sourcePositions);}
          }
        }
    throw new Error("Missing return statement in function");
  }

  final public TypeReference[] TypeArguments() throws ParseException {
  TypeReference[] result = new TypeReference[1];
  TypeReference typeRef = null;
  int length = 0;
    jj_consume_token(LESS);
    typeRef = TypeArgument();
     result[0] = typeRef;
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(COMMA);
      typeRef = TypeArgument();
     length = result.length;
     System.arraycopy(result, 0, result = new TypeReference[length + 1], 0, length);
     result[length] = typeRef;
    }
    jj_consume_token(GREATER);
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TypeReference TypeArgument() throws ParseException {
  TypeReference typeRef = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
    case LPAREN:
      typeRef = ReferenceType();
     {if (true) return typeRef;}
      break;
    case QUESTION:
      jj_consume_token(QUESTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        typeRef = WildcardBounds();
        break;
      default:
        ;
      }
     if(typeRef != null) {
                {if (true) return typeRef;}
     } else {
       {if (true) return new Wildcard(Wildcard.UNBOUND);}
     }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Wildcard WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      ReferenceType();
     {if (true) return new Wildcard(Wildcard.EXTENDS);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      ReferenceType();
     {if (true) return new Wildcard(Wildcard.SUPER);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionType FunctionType() throws ParseException {
  Token lBrace = null, rBrace = null;
  Argument[] arguments = null; Argument argument = null;
  TypeReference type = null;
  int length = 0;
    lBrace = jj_consume_token(LPAREN);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case LPAREN:
    case AT:
      argument = FormalParameter();
     arguments = new Argument[1]; arguments[0] = argument;
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_24;
        }
        jj_consume_token(COMMA);
        argument = FormalParameter();
      length = arguments.length;
      System.arraycopy(arguments, 0, arguments = new Argument[length + 1], 0, length);
      arguments[length] = argument;
      }
      break;
    default:
      ;
    }
    rBrace = jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    type = ResultType();
     {if (true) return new FunctionType(arguments, type, lBrace.sourceStart, rBrace.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public TypeReference PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
    {if (true) return TypeReference.baseTypeReference(TypeIds.T_boolean, 0);}
      break;
    case CHAR:
      jj_consume_token(CHAR);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_char, 0);}
      break;
    case BYTE:
      jj_consume_token(BYTE);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_byte, 0);}
      break;
    case SHORT:
      jj_consume_token(SHORT);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_short, 0);}
      break;
    case INT:
      jj_consume_token(INT);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_int, 0);}
      break;
    case LONG:
      jj_consume_token(LONG);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_long, 0);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_double, 0);}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
        {if (true) return TypeReference.baseTypeReference(TypeIds.T_boolean, 0);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypeReference ResultType() throws ParseException {
  TypeReference type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
    {if (true) return TypeReference.baseTypeReference(TypeIds.T_void, 0);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
    case LPAREN:
      type = Type();
    {if (true) return type;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NameReference Name() throws ParseException {
        Token token = null;
        char[][] tokens = new char[1][];
        long[] positions = new long[1];
        boolean qualified = false;
        int length = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      break;
    case ADD:
      token = jj_consume_token(ADD);
      break;
    case REMOVE:
      token = jj_consume_token(REMOVE);
      break;
    case GET:
      token = jj_consume_token(GET);
      break;
    case SET:
      token = jj_consume_token(SET);
      break;
    case REF:
      token = jj_consume_token(REF);
      break;
    case OUT:
      token = jj_consume_token(OUT);
      break;
    case EVENT:
      token = jj_consume_token(EVENT);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    tokens[0] = getTokenText(token);
    positions[0] = getTokenRange(token);
    label_25:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token = jj_consume_token(IDENTIFIER);
        break;
      case ADD:
        token = jj_consume_token(ADD);
        break;
      case REMOVE:
        token = jj_consume_token(REMOVE);
        break;
      case GET:
        token = jj_consume_token(GET);
        break;
      case SET:
        token = jj_consume_token(SET);
        break;
      case REF:
        token = jj_consume_token(REF);
        break;
      case OUT:
        token = jj_consume_token(OUT);
        break;
      case EVENT:
        token = jj_consume_token(EVENT);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        qualified = true;
    length = tokens.length;
    System.arraycopy(tokens, 0 , tokens = new char[length + 1][], 0, length);
    tokens[length] = getTokenText(token);
    System.arraycopy(positions, 0 , positions = new long[length + 1], 0, length);
    positions[length] = getTokenRange(token);
    }
    if(qualified) {
      {if (true) return new QualifiedNameReference(tokens, positions, (int)(positions[0] >>> 32), (int)(positions[0] & 0x00000000FFFFFFFF));}
    } else {
      {if (true) return new SingleNameReference(tokens[0], positions[0]);}
    }
    throw new Error("Missing return statement in function");
  }

  final public NameReference[] NameList() throws ParseException {
  NameReference[] result = new NameReference[1];
  NameReference nr = null;
  int length = 0;
    nr = Name();
    result[0] = nr;
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(COMMA);
      nr = Name();
    length = result.length;
    System.arraycopy(result, 0, result = new NameReference[length + 1], 0, length);
    result[length] = nr;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

///*// * Expression syntax follows.// *///Expression Expression():///*// * This expansion has been written this way instead of:// *   Assignment() | ConditionalExpression()// * for performance reasons.// * However, it is a weakening of the grammar for it allows the LHS of// * assignments to be any conditional expression whereas it can only be// * a primary expression.  Consider adding a semantic predicate to work// * around this.// *///{//	Expression lhs = null, expression = null;//	int op = 0;//}//{//  	(//   LOOKAHEAD(3)//  lhs = ConditionalExpression()//  [//    LOOKAHEAD(2)//    op = AssignmentOperator() expression = Expression()//    {//      lhs = new CompoundAssignment(lhs, expression, op, expression.sourceEnd);//    }//  ]//|//	lhs = LambdaExpression()//	)//	{//	  return lhs;//	}//}
  final public Expression Expression() throws ParseException {
        Expression lhs = null, expression = null;
        int op = 0;
    if (jj_2_22(2147483647)) {
      lhs = LambdaExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case NOT:
      case TWIDDLE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
        lhs = ConditionalExpression();
        if (jj_2_21(2)) {
          op = AssignmentOperator();
          expression = Expression();
      lhs = new CompoundAssignment(lhs, expression, op, expression.sourceEnd);
        } else {
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public LambdaExpression LambdaExpression() throws ParseException {
  Statement body = null;
  Argument[] arguments = null;
    arguments = LambdaParameters();
    jj_consume_token(ARROW);
    body = LambdaBody();
        LambdaExpression lambda = new LambdaExpression(this.compilationResult, false);
        lambda.body = body;
    lambda.arguments = arguments;
        {if (true) return lambda;}
    throw new Error("Missing return statement in function");
  }

  final public Argument[] LambdaParameters() throws ParseException {
  Argument[] arguments = null; Argument argument = null;
  Token id = null; int length = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
    arguments = new Argument[1];
    arguments[0] = new Argument(getTokenText(id), getTokenRange(id), null, 0);
      break;
    default:
      if (jj_2_23(2147483647)) {
        jj_consume_token(LPAREN);
        arguments = InferredFormalParameterList();
        jj_consume_token(RPAREN);
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
        case LPAREN:
        case AT:
          argument = FormalParameter();
    arguments = new Argument[1];
    arguments[0] = argument;
          label_27:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              break label_27;
            }
            jj_consume_token(COMMA);
            argument = FormalParameter();
          }
    length = arguments.length;
    System.arraycopy(arguments, 0, arguments = new Argument[length + 1] , 0, length);
    arguments[length] = argument;
          break;
        default:
          ;
        }
        jj_consume_token(RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public Argument[] InferredFormalParameterList() throws ParseException {
  Argument[] arguments = new Argument[1];
  Token id = null; int length = 0;
    id = jj_consume_token(IDENTIFIER);
    arguments[0] = new Argument(getTokenText(id), getTokenRange(id), null, 0);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_28;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
    length = arguments.length;
    System.arraycopy(arguments, 0, arguments = new Argument[length + 1] , 0, length);
    arguments[length] = new Argument(getTokenText(id), getTokenRange(id), null, 0);
    }
    {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public Statement LambdaBody() throws ParseException {
  Statement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      statement = Expression();
      break;
    case LBRACE:
      statement = Block();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//Expression LambdaExpression()://{//  Expression result = null;//}//{//  (//  LOOKAHEAD(2)//	<IDENTIFIER> <ARROW> ( Expression() | Block() )//| //	LOOKAHEAD(<LPAREN> <RPAREN> <ARROW>)//	<LPAREN> <RPAREN> <ARROW> ( Expression() | Block() )//| //  	LOOKAHEAD( <LPAREN> FormalParameter() ( <COMMA> FormalParameter() )*  <RPAREN>  <COLON> ResultType() <ARROW>  )//    <LPAREN> FormalParameter() ( <COMMA> FormalParameter() )*  <RPAREN>  <COLON> ResultType() <ARROW>//	 ( Expression() | Block() )//|//	LOOKAHEAD(<LPAREN>  <IDENTIFIER> ( <COMMA> <IDENTIFIER> )*  <RPAREN> <ARROW>  )//	<LPAREN> <IDENTIFIER> ( <COMMA><IDENTIFIER> )*  <RPAREN> <ARROW>//	( Expression() | Block() ))//	{//	  return new LambdaExpression(this.compilationResult, false);//	}//}
  final public int AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
            {if (true) return OperatorIds.EQUAL;}
      break;
    case MULTIPLY_EQUAL:
      jj_consume_token(MULTIPLY_EQUAL);
                       {if (true) return OperatorIds.MULTIPLY;}
      break;
    case DIVIDE_EQUAL:
      jj_consume_token(DIVIDE_EQUAL);
                     {if (true) return OperatorIds.DIVIDE;}
      break;
    case REMAINDER_EQUAL:
      jj_consume_token(REMAINDER_EQUAL);
                       {if (true) return OperatorIds.REMAINDER;}
      break;
    case PLUS_EQUAL:
      jj_consume_token(PLUS_EQUAL);
                   {if (true) return OperatorIds.PLUS;}
      break;
    case MINUS_EQUAL:
      jj_consume_token(MINUS_EQUAL);
                    {if (true) return OperatorIds.MINUS;}
      break;
    case LEFT_SHIFT_EQUAL:
      jj_consume_token(LEFT_SHIFT_EQUAL);
                        {if (true) return OperatorIds.LEFT_SHIFT;}
      break;
    case RIGHT_SHIFT_EQUAL:
      jj_consume_token(RIGHT_SHIFT_EQUAL);
                         {if (true) return OperatorIds.RIGHT_SHIFT;}
      break;
    case UNSIGNED_RIGHT_SHIFT_EQUAL:
      jj_consume_token(UNSIGNED_RIGHT_SHIFT_EQUAL);
                                  {if (true) return OperatorIds.UNSIGNED_RIGHT_SHIFT;}
      break;
    case AND_EQUAL:
      jj_consume_token(AND_EQUAL);
                 {if (true) return OperatorIds.AND;}
      break;
    case XOR_EQUAL:
      jj_consume_token(XOR_EQUAL);
                 {if (true) return OperatorIds.XOR;}
      break;
    case OR_EQUAL:
      jj_consume_token(OR_EQUAL);
                {if (true) return OperatorIds.OR;}
    {if (true) return 0;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {
  Expression condition = null, valueIfTrue= null, valueIfFalse = null;
    condition = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      jj_consume_token(QUESTION);
      valueIfTrue = Expression();
      jj_consume_token(COLON);
      valueIfFalse = Expression();
    {if (true) return new ConditionalExpression(condition, valueIfTrue, valueIfFalse);}
      break;
    default:
      ;
    }
        {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {
  Expression lhs = null, expression = null;
    lhs = ConditionalAndExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OR:
        ;
        break;
      default:
        break label_29;
      }
      jj_consume_token(OR_OR);
      expression = ConditionalAndExpression();
    lhs = new OR_OR_Expression(lhs, expression, OperatorIds.OR_OR);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {
  Expression lhs = null, expression = null;
    lhs = InclusiveOrExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_AND:
        ;
        break;
      default:
        break label_30;
      }
      jj_consume_token(AND_AND);
      expression = InclusiveOrExpression();
    lhs = new AND_AND_Expression(lhs, expression, OperatorIds.AND_AND);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression() throws ParseException {
Expression lhs = null, expression = null;
    lhs = ExclusiveOrExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        break label_31;
      }
      jj_consume_token(OR);
      expression = ExclusiveOrExpression();
    lhs = new BinaryExpression(lhs, expression, OperatorIds.OR);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression() throws ParseException {
  Expression lhs = null, expression = null;
    lhs = AndExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_32;
      }
      jj_consume_token(XOR);
      expression = AndExpression();
    lhs = new BinaryExpression(lhs, expression, OperatorIds.XOR);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {
  Expression lhs = null, expression = null;
    lhs = EqualityExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        break label_33;
      }
      jj_consume_token(AND);
      expression = EqualityExpression();
    lhs = new BinaryExpression(lhs, expression, OperatorIds.AND);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {
  Expression lhs = null, expression = null;
  int op = 0;
    lhs = InstanceOfExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
      case NOT_EQUAL:
        ;
        break;
      default:
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
        jj_consume_token(EQUAL_EQUAL);
    op = OperatorIds.EQUAL;
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
    op = OperatorIds.NOT_EQUAL;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = InstanceOfExpression();
    lhs = new EqualExpression(lhs, expression, op);
    }
    {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InstanceOfExpression() throws ParseException {
  Expression expression = null;
  TypeReference typeRef = null;
    expression = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      typeRef = Type();
    {if (true) return new InstanceOfExpression(expression, typeRef);}
      break;
    default:
      ;
    }
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {
  Expression lhs = null, expression = null;
  int op = 0;
    lhs = ShiftExpression();
    label_35:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
    op = OperatorIds.GREATER;
        break;
      case GREATER:
        jj_consume_token(GREATER);
    op = OperatorIds.LESS_EQUAL;
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
    op = OperatorIds.LESS_EQUAL;
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
    op = OperatorIds.GREATER_EQUAL;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = ShiftExpression();
    lhs = new BinaryExpression(lhs, expression, op);
    }
        {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ShiftExpression() throws ParseException {
  Expression lhs = null, expression = null;
  int op = 0;
    lhs = AdditiveExpression();
    label_36:
    while (true) {
      if (jj_2_26(1)) {
        ;
      } else {
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
        jj_consume_token(LEFT_SHIFT);
    op = OperatorIds.LEFT_SHIFT;
        break;
      default:
        if (jj_2_27(1)) {
          RSIGNEDSHIFT();
    op = OperatorIds.RIGHT_SHIFT;
        } else if (jj_2_28(1)) {
          RUNSIGNEDSHIFT();
    op = OperatorIds.UNSIGNED_RIGHT_SHIFT;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      expression = AdditiveExpression();
    lhs = new BinaryExpression(lhs, expression, op);
    }
        {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
  Expression lhs = null, expression = null;
  int op = 0;
    lhs = MultiplicativeExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
    op = OperatorIds.PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
    op = OperatorIds.MINUS;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = MultiplicativeExpression();
    lhs = new BinaryExpression(lhs, expression, op);
    }
        {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {
  Expression lhs = null, expression = null;
  int op = 0;
    lhs = UnaryExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
        ;
        break;
      default:
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
    op = OperatorIds.MULTIPLY;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
    op = OperatorIds.DIVIDE;
        break;
      case REMAINDER:
        jj_consume_token(REMAINDER);
    op = OperatorIds.REMAINDER;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = UnaryExpression();
    lhs = new BinaryExpression(lhs, expression, op);
    }
        {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

//Expression UnaryExpression()://{}//{//  ( <PLUS> | <MINUS> ) UnaryExpression()//|//  PreIncrementExpression()//|//  PreDecrementExpression()//|//  UnaryExpressionNotPlusMinus()//}////Expression PreIncrementExpression()://{}//{//  <PLUS_PLUS> PrimaryExpression()//}////Expression PreDecrementExpression()://{}//{//  <MINUS_MINUS> PrimaryExpression()//}
  final public Expression UnaryExpression() throws ParseException {
  Expression expression = null; int op = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
    op = OperatorIds.PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
    op = OperatorIds.MINUS;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = UnaryExpression();
    {if (true) return new UnaryExpression(expression, op);}
      break;
    case PLUS_PLUS:
    case MINUS_MINUS:
      expression = PrefixExpression();
    {if (true) return expression;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
      expression = UnaryExpressionNotPlusMinus();
    {if (true) return expression;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression PrefixExpression() throws ParseException {
  Expression expression = null; int op = 0; Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
      token = jj_consume_token(PLUS_PLUS);
     op = OperatorIds.PLUS_PLUS;
      break;
    case MINUS_MINUS:
      token = jj_consume_token(MINUS_MINUS);
     op = OperatorIds.MINUS_MINUS;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    expression = PrimaryExpression();
    {if (true) return new PrefixExpression(expression, IntLiteral.One, op, token.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNotPlusMinus() throws ParseException {
  Expression expression = null; int op = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case TWIDDLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TWIDDLE:
        jj_consume_token(TWIDDLE);
    op = OperatorIds.TWIDDLE;
        break;
      case NOT:
        jj_consume_token(NOT);
    op = OperatorIds.NOT;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = UnaryExpression();
    {if (true) return new UnaryExpression(expression, op);}
      break;
    default:
      if (jj_2_29(2147483647)) {
        expression = CastExpression();
    {if (true) return expression;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case REF:
        case OUT:
        case GET:
        case SET:
        case ADD:
        case REMOVE:
        case EVENT:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          expression = PostfixExpression();
    {if (true) return expression;}
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_30(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_31(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TWIDDLE:
          jj_consume_token(TWIDDLE);
          break;
        case NOT:
          jj_consume_token(NOT);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Expression PostfixExpression() throws ParseException {
  Expression expression = null; int op = 0;
    expression = PrimaryExpression();
    if (jj_2_32(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        jj_consume_token(PLUS_PLUS);
    op = OperatorIds.PLUS_PLUS;
        break;
      case MINUS_MINUS:
        jj_consume_token(MINUS_MINUS);
    op = OperatorIds.MINUS_MINUS;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return new PostfixExpression(expression, IntLiteral.One, op, expression.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastExpression() throws ParseException {
  Expression expression;
  TypeReference type;
    if (jj_2_33(2147483647)) {
      jj_consume_token(LPAREN);
      type = Type();
      jj_consume_token(RPAREN);
      expression = UnaryExpression();
    {if (true) return new CastExpression(expression, type);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        type = Type();
        jj_consume_token(RPAREN);
        expression = UnaryExpressionNotPlusMinus();
    {if (true) return new CastExpression(expression, type);}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {
  Object suffix = null;
  Expression prefix = null;
    prefix = PrimaryPrefix();
    label_39:
    while (true) {
      if (jj_2_34(2)) {
        ;
      } else {
        break label_39;
      }
      suffix = PrimarySuffix();
    if(suffix instanceof CallArgument) {
      CallArgument callArguments = (CallArgument)suffix;
      prefix = new MethodCall(prefix, callArguments.arguments); //MethodCall

    } else if(suffix instanceof IndexerPart) {
      prefix = new ArrayReference(prefix, ((IndexerPart)suffix).pos); //Indexer
    } else if(suffix instanceof MemberSelector) {
      prefix = new ReferenceExpression(); //MethodCall with TypeArgument
    } else if(suffix instanceof SingleNameReference) {
//      ((SingleNameReference)suffix).reciever = prefix;
      prefix =  (SingleNameReference)suffix;
    }
    }
    {if (true) return prefix;}
    throw new Error("Missing return statement in function");
  }

  final public MemberSelector MemberSelector() throws ParseException {
  Expression[] typeArguments = null;
  Token id = null;
    jj_consume_token(DOT);
    typeArguments = TypeArguments();
    id = jj_consume_token(IDENTIFIER);
    {if (true) return new MemberSelector(typeArguments, id);}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryPrefix() throws ParseException {
  Token token = null;
  Expression expression = null;
  TypeReference type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      expression = Literal();
    {if (true) return expression;}
      break;
    case THIS:
      //  LOOKAHEAD( ( <IDENTIFIER> <DOT> )* "this" )
      //  ( <IDENTIFIER> <DOT> )*
        token = jj_consume_token(THIS);
    {if (true) return new ThisReference(token.sourceStart, token.sourceEnd);}
      break;
    case SUPER:
      token = jj_consume_token(SUPER);
    {if (true) return new SuperReference(token.sourceStart, token.sourceEnd);}
      break;
    default:
      if (jj_2_35(3)) {
        jj_consume_token(LPAREN);
        expression = Expression();
        jj_consume_token(RPAREN);
      {if (true) return new ParenthesizedExpression(expression);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          expression = AllocationExpression();
    {if (true) return expression;}
          break;
        default:
          if (jj_2_36(2147483647)) {
            type = ResultType();
            jj_consume_token(DOT);
            token = jj_consume_token(CLASS);
    {if (true) return new ClassLiteralAccess(token.sourceEnd, type);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case REF:
            case OUT:
            case GET:
            case SET:
            case ADD:
            case REMOVE:
            case EVENT:
            case IDENTIFIER:
              expression = Name();
    {if (true) return expression;}
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object PrimarySuffix() throws ParseException {
        Object result = null;
        Token token = null;
        Expression expression = null;
        Expression[] arguments = null;
    if (jj_2_37(3)) {
      result = MemberSelector();
    {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expression = Expression();
        jj_consume_token(RBRACKET);
    {if (true) return new IndexerPart(expression);}
        break;
      case DOT:
        jj_consume_token(DOT);
        token = jj_consume_token(IDENTIFIER);
    {if (true) return new SingleNameReference(getTokenText(token), getTokenRange(token));}
        break;
      case LPAREN:
        arguments = Arguments();
     {if (true) return new CallArgument(arguments);}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  Token token = null;
  Literal literal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      token = jj_consume_token(INTEGER_LITERAL);
    {if (true) return IntLiteral.buildIntLiteral(getTokenText(token), token.sourceStart, token.sourceEnd);}
      break;
    case FLOAT_LITERAL:
      token = jj_consume_token(FLOAT_LITERAL);
    {if (true) return new FloatLiteral(getTokenText(token), token.sourceStart, token.sourceEnd);}
      break;
    case DOUBLE_LITERAL:
      token = jj_consume_token(DOUBLE_LITERAL);
    {if (true) return new DoubleLiteral(getTokenText(token), token.sourceStart, token.sourceEnd);}
      break;
    case LONG_LITERAL:
      token = jj_consume_token(LONG_LITERAL);
    {if (true) return LongLiteral.buildLongLiteral(getTokenText(token), token.sourceStart, token.sourceEnd);}
      break;
    case CHARACTER_LITERAL:
      token = jj_consume_token(CHARACTER_LITERAL);
    {if (true) return new CharLiteral(getTokenText(token), token.sourceStart, token.sourceEnd);}
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
    {if (true) return new StringLiteral(getTokenText(token), token.sourceStart, token.sourceEnd, 1);}
      break;
    case FALSE:
    case TRUE:
      literal = BooleanLiteral();
    {if (true) return literal;}
      break;
    case NULL:
      literal = NullLiteral();
    {if (true) return literal;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MagicLiteral BooleanLiteral() throws ParseException {
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      token = jj_consume_token(TRUE);
    {if (true) return new TrueLiteral(token.sourceStart, token.sourceEnd);}
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
    {if (true) return new TrueLiteral(token.sourceStart, token.sourceEnd);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NullLiteral NullLiteral() throws ParseException {
  Token token = null;
    token = jj_consume_token(NULL);
    {if (true) return new NullLiteral(token.sourceStart, token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Expression[] Arguments() throws ParseException {
  Expression[] result = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      result = ArgumentList();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression[] ArgumentList() throws ParseException {
  Expression argument = null;
  Expression[] result = new Expression[1];
  int length = 0;
    argument = Expression();
    result[0] = argument;
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_40;
      }
      jj_consume_token(COMMA);
      argument = Expression();
    length = result.length;
    System.arraycopy(result, 0, result = new Expression[length + 1], 0, length);
    result[length] = argument;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AllocationExpression() throws ParseException {
  TypeReference type = null;
  TypeReference[] typeArguments = null;
  Expression[] arguments = null;
  TypeDeclaration typeDecl;
    if (jj_2_39(2)) {
      jj_consume_token(NEW);
      type = PrimitiveType();
      ArrayDimsAndInits();
    {if (true) return new AllocationExpression();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        type = ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          typeArguments = TypeArguments();
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          arguments = Arguments();
          if (jj_2_38(2)) {
        typeDecl = new TypeDeclaration(this.compilationResult);
            ClassOrInterfaceBody(false, typeDecl);

          } else {
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      {if (true) return new AllocationExpression();}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
    if (jj_2_42(2)) {
      label_41:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        if (jj_2_40(2)) {
          ;
        } else {
          break label_41;
        }
      }
      label_42:
      while (true) {
        if (jj_2_41(2)) {
          ;
        } else {
          break label_42;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_43:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_43;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
  final public Statement Statement() throws ParseException {
  Statement result = null;
    if (jj_2_43(2)) {
      result = LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        result = AssertStatement();
        break;
      case LBRACE:
        result = Block();
        break;
      case SEMICOLON:
        result = EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS_PLUS:
      case MINUS_MINUS:
        result = StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        result = SwitchStatement();
        break;
      case IF:
        result = IfStatement();
        break;
      case WHILE:
        result = WhileStatement();
        break;
      case DO:
        result = DoStatement();
        break;
      case FOR:
        result = ForStatement();
        break;
      case BREAK:
        result = BreakStatement();
        break;
      case CONTINUE:
        result = ContinueStatement();
        break;
      case RETURN:
        result = ReturnStatement();
        break;
      case THROW:
        result = ThrowStatement();
        break;
      case SYNCHRONIZED:
        result = SynchronizedStatement();
        break;
      case TRY:
        result = TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public AssertStatement AssertStatement() throws ParseException {
  Expression exceptionArgument = null, assertExpression = null;
  Token token = null;
    token = jj_consume_token(ASSERT);
    exceptionArgument = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      assertExpression = Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new AssertStatement( exceptionArgument, assertExpression, token.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
  Statement statement = null;
  Token label = null;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    statement = Statement();
    {if (true) return new LabeledStatement(getTokenText(label), statement, getTokenRange(label), statement.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
  Statement[] statements = null;
    jj_consume_token(LBRACE);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case PLUS_PLUS:
      case MINUS_MINUS:
        ;
        break;
      default:
        break label_44;
      }
      statements = BlockStatement();
    }
    jj_consume_token(RBRACE);
    if(statements == null) {
      {if (true) return new Block(0);}
    } else {
      Block block = new Block(statements.length);
      block.statements = statements;
      {if (true) return block;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement[] BlockStatement() throws ParseException {
  Statement[] statments = null;
  Statement statement = null;
  TypeDeclaration typeDecl = null;
    if (jj_2_44(2147483647)) {
      statments = LocalVariableDeclaration();
    {if (true) return statments;}
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case PLUS_PLUS:
      case MINUS_MINUS:
        statement = Statement();
    {if (true) return new Statement[]{statement };}
        break;
      case CLASS:
      case INTERFACE:
        typeDecl = ClassOrInterfaceDeclaration();
    {if (true) return new Statement[]{typeDecl };}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LocalDeclaration[] LocalVariableDeclaration() throws ParseException {
  LocalDeclaration[] result = new LocalDeclaration[1];
  Modifier modifier = null; int length = 0;
  TypeReference type = null;
  VariableDeclarator vd = null;
    modifier = Modifiers();
    type = Type();
    vd = VariableDeclarator();
    result[0] = new LocalDeclaration(getTokenText(vd.name), vd.name.sourceStart, vd.name.sourceEnd);
    result[0].modifiers |= modifier.modifiers;
    result[0].annotations = modifier.annotations;
    result[0].type = type;
    result[0].initialization = vd.initialization;
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_45;
      }
      jj_consume_token(COMMA);
      vd = VariableDeclarator();
    length = result.length;
    System.arraycopy(result, 0, result = new LocalDeclaration[length + 1], 0, length);
    result[length] = new LocalDeclaration(getTokenText(vd.name), vd.name.sourceStart, vd.name.sourceEnd);
    result[length].modifiers |= modifier.modifiers;
    result[0].annotations = modifier.annotations;
    result[length].type = type;
    result[length].initialization = vd.initialization;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
  Token token = null;
    token = jj_consume_token(SEMICOLON);
    {if (true) return new EmptyStatement(token.sourceStart, token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Expression StatementExpression() throws ParseException {
  Expression expression = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
      expression = PrefixExpression();
    {if (true) return expression;}
    Token token = null;
    int op = 0;
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      expression = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS_EQUAL:
      case MINUS_EQUAL:
      case MULTIPLY_EQUAL:
      case DIVIDE_EQUAL:
      case AND_EQUAL:
      case OR_EQUAL:
      case XOR_EQUAL:
      case REMAINDER_EQUAL:
      case LEFT_SHIFT_EQUAL:
      case RIGHT_SHIFT_EQUAL:
      case UNSIGNED_RIGHT_SHIFT_EQUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_PLUS:
          token = jj_consume_token(PLUS_PLUS);
      {if (true) return new PostfixExpression(expression, IntLiteral.One, OperatorIds.PLUS, token.sourceEnd);}
          break;
        case MINUS_MINUS:
          token = jj_consume_token(MINUS_MINUS);
      {if (true) return new PostfixExpression(expression, IntLiteral.One, OperatorIds.MINUS, token.sourceEnd);}
          break;
        case EQUAL:
        case PLUS_EQUAL:
        case MINUS_EQUAL:
        case MULTIPLY_EQUAL:
        case DIVIDE_EQUAL:
        case AND_EQUAL:
        case OR_EQUAL:
        case XOR_EQUAL:
        case REMAINDER_EQUAL:
        case LEFT_SHIFT_EQUAL:
        case RIGHT_SHIFT_EQUAL:
        case UNSIGNED_RIGHT_SHIFT_EQUAL:
          op = AssignmentOperator();
          expression = Expression();
      {if (true) return new CompoundAssignment(expression, expression,op, expression.sourceEnd);}
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
   SwitchStatement result = new SwitchStatement();
   Expression expression = null;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULT_:
        ;
        break;
      default:
        break label_46;
      }
      SwitchLabel(result);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case REF:
        case OUT:
        case GET:
        case SET:
        case ADD:
        case REMOVE:
        case EVENT:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case PLUS_PLUS:
        case MINUS_MINUS:
          ;
          break;
        default:
          break label_47;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CaseStatement SwitchLabel(SwitchStatement result) throws ParseException {
  Expression constant = null;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      constant = Expression();
      jj_consume_token(COLON);
    {if (true) return new CaseStatement(constant, constant.sourceStart, constant.sourceEnd);}
      break;
    case DEFAULT_:
      token = jj_consume_token(DEFAULT_);
      jj_consume_token(COLON);
    {if (true) return new CaseStatement(null, token.sourceStart, token.sourceEnd);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement IfStatement() throws ParseException {
  Expression condition = null;
  Statement thenStatement = null, elseStatement = null;
  Token token = null;
    token = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    thenStatement = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseStatement = Statement();
      break;
    default:
      ;
    }
        if(elseStatement == null) {
          {if (true) return new IfStatement(condition, thenStatement, token.sourceStart, thenStatement.sourceEnd);}
        } else {
           {if (true) return new IfStatement(condition, thenStatement, elseStatement, token.sourceStart, elseStatement.sourceEnd);}
        }
    throw new Error("Missing return statement in function");
  }

  final public Statement WhileStatement() throws ParseException {
  Statement action = null;
  Expression condition = null;
  Token token = null;
    token = jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    action = Statement();
    {if (true) return new WhileStatement(condition, action, token.sourceStart, action.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Statement DoStatement() throws ParseException {
  Statement action = null;
  Expression condition = null;
  Token token = null;
    token = jj_consume_token(DO);
    action = Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
        {if (true) return new DoStatement(condition, action, token.sourceStart, condition.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Statement ForStatement() throws ParseException {
        Statement action = null;
        Expression expression = null;
        Modifier modifier = null; TypeReference type = null; Token id = null, forLabel = null;
        boolean foreach = true;
        Statement[] initializations = null, increments = null;
    forLabel = jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_45(2147483647)) {
      modifier = Modifiers();
      type = Type();
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      expression = Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case PLUS_PLUS:
      case MINUS_MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case REF:
        case OUT:
        case GET:
        case SET:
        case ADD:
        case REMOVE:
        case EVENT:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case AT:
        case PLUS_PLUS:
        case MINUS_MINUS:
          initializations = ForInit();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case REF:
        case OUT:
        case GET:
        case SET:
        case ADD:
        case REMOVE:
        case EVENT:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case NOT:
        case TWIDDLE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
          expression = Expression();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case REF:
        case OUT:
        case GET:
        case SET:
        case ADD:
        case REMOVE:
        case EVENT:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case PLUS_PLUS:
        case MINUS_MINUS:
          increments = ForUpdate();
          break;
        default:
          ;
        }
       foreach = false;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    action = Statement();
    if(foreach) {
        LocalDeclaration localDeclaration = new LocalDeclaration(getTokenText(id), id.sourceStart, action.sourceEnd);
        localDeclaration.modifiers |= modifier.modifiers;
        localDeclaration.type = type;
        ForeachStatement foreachStatement = new ForeachStatement(localDeclaration, forLabel.sourceStart);
        foreachStatement.collection = expression;
        {if (true) return foreachStatement;}
    } else {
          {if (true) return new ForStatement(initializations, expression, increments, action,
                false, forLabel.sourceStart, action.sourceEnd);}
        }
    throw new Error("Missing return statement in function");
  }

  final public Statement[] ForInit() throws ParseException {
  Statement[] result = null;
    if (jj_2_46(2147483647)) {
      result = LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case REF:
      case OUT:
      case GET:
      case SET:
      case ADD:
      case REMOVE:
      case EVENT:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS_PLUS:
      case MINUS_MINUS:
        result = StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Statement[] StatementExpressionList() throws ParseException {
  Statement[] result = new Statement[1];
  Statement statement = null;
  int length = 0;
    statement = StatementExpression();
    result[0] = statement;
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_48;
      }
      jj_consume_token(COMMA);
      statement = StatementExpression();
    length = result.length;
    System.arraycopy(result, 0, result = new Statement[length + 1], 0, length);
    result[length] = statement;
    }
  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Statement[] ForUpdate() throws ParseException {
  Statement[] result = null;
    result = StatementExpressionList();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
  Token label = null, breakId = null;
    breakId = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      label = jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new BreakStatement(label !=null ? getTokenText(label) : null, breakId.sourceStart, label != null ? label.sourceEnd : breakId.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
  Token continueId = null, label = null;
    continueId = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      label = jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
        {if (true) return new ContinueStatement(label != null ? getTokenText(label) : null, continueId.sourceStart, label != null ? label.sourceEnd : continueId.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
  Expression expression = null;
  Token token = null;
    token = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      expression = Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
        {if (true) return new ReturnStatement(expression, token.sourceStart, expression != null ? expression.sourceEnd : token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
  Token token = null;
  Expression exception = null;
    token = jj_consume_token(THROW);
    exception = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ThrowStatement(exception, token.sourceStart, exception.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {
  Token token = null;
  Block block = null;
  Expression expression = null;
    token = jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
    block = Block();
    {if (true) return new SynchronizedStatement(expression, block, token.sourceStart, token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
  Block catchBlock = null, tryBlock = null, finallyBlock = null;
  Block[] catchBlocks = null;
  Argument[] arguments = null; Argument argument = null;
  int length = 0;
  Token token = null;
    token = jj_consume_token(TRY);
    tryBlock = Block();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_49;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      argument = FormalParameter();
      jj_consume_token(RPAREN);
      catchBlock = Block();
    if(length == 0) {
      arguments = new Argument[1];
      arguments[0] = argument;
      catchBlocks = new Block[1];
      catchBlocks[0] = catchBlock;
    } else {
      length = arguments.length;
      System.arraycopy(arguments, 0, arguments = new Argument[length + 1], 0, length);
      arguments[length] = argument;
      System.arraycopy(catchBlocks, 0, catchBlocks = new Block[length + 1], 0, length);
      catchBlocks[length] = catchBlock;
    }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      finallyBlock = Block();
      break;
    default:
      ;
    }
    TryStatement tryStatement = new TryStatement();
    tryStatement.tryBlock = tryBlock;
    tryStatement.catchArguments = arguments;
    tryStatement.catchBlocks = catchBlocks;
    tryStatement.finallyBlock = finallyBlock;
    tryStatement.sourceStart = token.sourceStart;
        tryStatement.sourceEnd = finallyBlock != null ? finallyBlock.sourceEnd : catchBlocks != null ? catchBlocks[catchBlocks.length - 1].sourceEnd : tryBlock.sourceEnd;

    {if (true) return tryStatement;}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GREATER &&
                    ((MyToken)getToken(1)).realKind == UNSIGNED_RIGHT_SHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GREATER);
    jj_consume_token(GREATER);
    jj_consume_token(GREATER);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GREATER &&
                    ((MyToken)getToken(1)).realKind == RIGHT_SHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GREATER);
    jj_consume_token(GREATER);
  }

/* Annotation syntax follows. */
  final public Annotation Annotation() throws ParseException {
        Annotation result = null;
    if (jj_2_47(2147483647)) {
      result = NormalAnnotation();
    } else if (jj_2_48(2147483647)) {
      result = SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        result = MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotation NormalAnnotation() throws ParseException {
  NormalAnnotation result = null;
  MemberValuePair[] memberValuePairs = null;
  TypeReference type = null;
  Token id = null;
    id = jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      memberValuePairs = MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
        {if (true) return new NormalAnnotation(type, id.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotation MarkerAnnotation() throws ParseException {
  TypeReference type = null;
  Token id = null;
  NameReference nameReference;
    id = jj_consume_token(AT);
    nameReference = Name();
    if(nameReference instanceof SingleNameReference)
    {
        SingleNameReference sNameRef = (SingleNameReference)nameReference;
                type = new SingleTypeReference(sNameRef.token, ((long)sNameRef.sourceStart) << 32 + sNameRef.sourceEnd);

    } else
    {
      QualifiedNameReference qNameRef = (QualifiedNameReference) nameReference;;
      type = new QualifiedTypeReference(qNameRef.tokens, qNameRef.sourcePositions);
    }
    {if (true) return new MarkerAnnotation(type, id.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotation SingleMemberAnnotation() throws ParseException {
   Expression memberValue = null;
   TypeReference type = null;
   Token id = null;
    id = jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    memberValue = MemberValue();
    jj_consume_token(RPAREN);
    {if (true) return new SingleMemberAnnotation(type, id.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair[] MemberValuePairs() throws ParseException {
 MemberValuePair[] memberValuePairs = new MemberValuePair[1]; int length = 0;
 MemberValuePair memberValuePair = null;
    memberValuePair = MemberValuePair();
     memberValuePairs[0] = memberValuePair;
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_50;
      }
      jj_consume_token(COMMA);
      memberValuePair = MemberValuePair();
     length = memberValuePairs.length;
     System.arraycopy(memberValuePairs, 0, memberValuePairs = new MemberValuePair[length + 1], 0, length);
      memberValuePairs[length] = memberValuePair;
    }
     {if (true) return memberValuePairs;}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {
  Token id = null; Expression value = null;
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    value = MemberValue();
      {if (true) return new MemberValuePair(getTokenText(id), id.sourceStart, id.sourceEnd, value);}
    throw new Error("Missing return statement in function");
  }

  final public Expression MemberValue() throws ParseException {
  Expression result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      result = Annotation();
      break;
    case LBRACE:
      result = MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      result = ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer MemberValueArrayInitializer() throws ParseException {
  Expression[] expressions = null;
  Expression expression = null;
  int length = 0;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case REF:
    case OUT:
    case GET:
    case SET:
    case ADD:
    case REMOVE:
    case EVENT:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case AT:
    case NOT:
    case TWIDDLE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
      expression = MemberValue();
    if(expressions == null)
    {
      expressions = new Expression[1];
      expressions[0] = expression;
    }else
    {
      length = expressions.length;
      System.arraycopy(expressions, 0, expressions = new Expression[length + 1], 0, length);
      expressions[length] = expression;
    }
      label_51:
      while (true) {
        if (jj_2_49(2)) {
          ;
        } else {
          break label_51;
        }
        jj_consume_token(COMMA);
        expression = MemberValue();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
    ArrayInitializer result = new ArrayInitializer();
    result.expressions = expressions;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* Annotation Types. */
  final public TypeDeclaration AnnotationTypeDeclaration() throws ParseException {
  TypeDeclaration result = null;
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void AnnotationTypeBody(TypeDeclaration typeDeclaration) throws ParseException {
    jj_consume_token(LBRACE);
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_52;
      }
      AnnotationTypeMemberDeclaration(typeDeclaration);
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration(TypeDeclaration typeDeclaration) throws ParseException {
   Modifier modifier= null;
   TypeReference type = null; Token id = null; FieldDeclaration[] fields = null;
   TypeDeclaration subTypeDecl = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case LPAREN:
    case AT:
      modifier = Modifiers();
      if (jj_2_50(2147483647)) {
        type = Type();
        id = jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFAULT_:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          subTypeDecl = ClassOrInterfaceDeclaration();
          break;
        case ENUM:
          subTypeDecl = EnumDeclaration();
          break;
        case AT:
          subTypeDecl = AnnotationTypeDeclaration();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
        case LPAREN:
          fields = FieldDeclaration(modifier);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);

      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(DEFAULT_);
    MemberValue();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_111() {
    if (jj_3R_88()) return true;
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_169()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_165()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_170()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(AND_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(UNSIGNED_RIGHT_SHIFT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(RIGHT_SHIFT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(LEFT_SHIFT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(OR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) return true;
    }
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(XOR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(MULTIPLY_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(MINUS_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(PLUS_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(REMAINDER_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(DIVIDE_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(QUESTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(DEFAULT_)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_187()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_392()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_379()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_3R_280()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_367()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_96()) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_3R_376()) return true;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_362()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_370()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_323() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_88()) return true;
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_68()) return true;
    if (jj_3R_326()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_375()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_164()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    }
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_174()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    Token xsp;
    if (jj_3R_398()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_226()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_385() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    }
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    if (jj_3_40()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_110()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_344() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_96()) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_96()) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_286()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_288()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(DEFAULT_)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_280()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_351()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(EVENT)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(REMOVE)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    if (jj_3R_110()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(GET)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(SET)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_374()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(GET)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(SET)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_290()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_226()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_225()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_390()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_96()) return true;
    if (jj_3R_68()) return true;
    if (jj_3R_326()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_370()) return true;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_373()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_308()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_350()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_96()) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(AND_AND)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_305()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(OR_OR)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(TWIDDLE)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_295()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_298()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_299()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(99)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_308()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_313()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(EQUAL_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_311()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_310()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_245()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_191()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LEFT_SHIFT)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_325()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_96()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GREATER &&
                ((MyToken)getToken(1)).realKind == UNSIGNED_RIGHT_SHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_136()) return true;
    if (jj_scan_token(GREATER)) return true;
    if (jj_scan_token(GREATER)) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    if (jj_3R_369()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GREATER &&
                ((MyToken)getToken(1)).realKind == RIGHT_SHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_135()) return true;
    if (jj_scan_token(GREATER)) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    }
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(REMAINDER)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public Scanner token_source;
//  Scanner jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
//    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Scanner();
    try {
		token_source.setSource(Util.getInputStreamAsCharArray(stream, stream.available(), encoding));
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    token = new Token();
    jj_ntk = -1;
  }

//  /** Reinitialise. */
//  public void ReInit(java.io.InputStream stream) {
//     ReInit(stream, null);
//  }
//  /** Reinitialise. */
//  public void ReInit(java.io.InputStream stream, String encoding) {
//    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
//    token_source.ReInit(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//  }
//
//  /** Constructor. */
//  public Parser(java.io.Reader stream) {
//    jj_input_stream = new JavaCharStream(stream, 1, 1);
//    token_source = new ParserTokenManager(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//  }
//
//  /** Reinitialise. */
//  public void ReInit(java.io.Reader stream) {
//    jj_input_stream.ReInit(stream, 1, 1);
//    token_source.ReInit(jj_input_stream);
//    token = new Token();
//    jj_ntk = -1;
//  }
//
//  /** Constructor with generated Token Manager. */
//  public Parser(ParserTokenManager tm) {
//    token_source = tm;
//    token = new Token();
//    jj_ntk = -1;
//  }
//
//  /** Reinitialise. */
//  public void ReInit(ParserTokenManager tm) {
//    token_source = tm;
//    token = new Token();
//    jj_ntk = -1;
//  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
