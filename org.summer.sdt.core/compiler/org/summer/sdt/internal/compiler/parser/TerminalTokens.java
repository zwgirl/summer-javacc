/*******************************************************************************
 * Copyright (c) 2000, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.summer.sdt.internal.compiler.parser;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.summer.sdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public interface TerminalTokens {
//	 special tokens not part of grammar - not autogenerated
	int TokenNameNotAToken = 0,
		TokenNameWHITESPACE = 1000,
//		TokenNameCOMMENT_LINE = 1001,
//		TokenNameCOMMENT_BLOCK = 1002,
		TokenNameCOMMENT_JAVADOC = 1003;
//
//	int TokenNameIdentifier = 22,
//		TokenNameabstract = 51,
//		TokenNameassert = 72,
//		TokenNameboolean = 97,
//		TokenNamebreak = 73,
//		TokenNamebyte = 98,
//		TokenNamecase = 99,
//		TokenNamecatch = 100,
//		TokenNamechar = 101,
//		TokenNameclass = 67,
//		TokenNamecontinue = 74,
//		TokenNameconst = 116,
//		TokenNamedefault = 75,
//		TokenNamedo = 76,
//		TokenNamedouble = 102,
//		TokenNameelse = 111,
//		TokenNameenum = 69,
//		TokenNameextends = 96,
//		TokenNamefalse = 38,
//		TokenNamefinal = 52,
//		TokenNamefinally = 109,
//		TokenNamefloat = 103,
//		TokenNamefor = 77,
//		TokenNamegoto = 117,
//		TokenNameif = 78,
//		TokenNameimplements = 114,
//		TokenNameimport = 104,
//		TokenNameinstanceof = 17,
//		TokenNameint = 105,
//		TokenNameinterface = 68,
//		TokenNamelong = 106,
//		TokenNamenative = 53,
//		TokenNamenew = 36,
//		TokenNamenull = 39,
//		TokenNamepackage = 95,
//		TokenNameprivate = 54,
//		TokenNameprotected = 55,
//		TokenNamepublic = 56,
//		TokenNamereturn = 79,
//		TokenNameshort = 107,
//		TokenNamestatic = 40,
//		TokenNamestrictfp = 57,
//		TokenNamesuper = 34,
//		TokenNameswitch = 80,
//		TokenNamesynchronized = 41,
//		TokenNamethis = 35,
//		TokenNamethrow = 81,
//		TokenNamethrows = 112,
//		TokenNametransient = 58,
//		TokenNametrue = 42,
//		TokenNametry = 82,
//		TokenNamevoid = 108,
//		TokenNamevolatile = 59,
//		TokenNamewhile = 71,
//		TokenNameIntegerLiteral = 43,
//		TokenNameLongLiteral = 44,
//		TokenNameFloatingPointLiteral = 45,
//		TokenNameDoubleLiteral = 46,
//		TokenNameCharacterLiteral = 47,
//		TokenNameStringLiteral = 48,
//		TokenNamePLUS_PLUS = 1,
//		TokenNameMINUS_MINUS = 2,
//		TokenNameEQUAL_EQUAL = 19,
//		TokenNameLESS_EQUAL = 12,
//		TokenNameGREATER_EQUAL = 13,
//		TokenNameNOT_EQUAL = 20,
//		TokenNameLEFT_SHIFT = 18,
//		TokenNameRIGHT_SHIFT = 14,
//		TokenNameUNSIGNED_RIGHT_SHIFT = 16,
//		TokenNamePLUS_EQUAL = 84,
//		TokenNameMINUS_EQUAL = 85,
//		TokenNameMULTIPLY_EQUAL = 86,
//		TokenNameDIVIDE_EQUAL = 87,
//		TokenNameAND_EQUAL = 88,
//		TokenNameOR_EQUAL = 89,
//		TokenNameXOR_EQUAL = 90,
//		TokenNameREMAINDER_EQUAL = 91,
//		TokenNameLEFT_SHIFT_EQUAL = 92,
//		TokenNameRIGHT_SHIFT_EQUAL = 93,
//		TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 94,
//		TokenNameOR_OR = 31,
//		TokenNameAND_AND = 30,
//		TokenNamePLUS = 4,
//		TokenNameMINUS = 5,
//		TokenNameNOT = 62,
//		TokenNameREMAINDER = 7,
//		TokenNameXOR = 23,
//		TokenNameAND = 21,
//		TokenNameMULTIPLY = 6,
//		TokenNameOR = 25,
//		TokenNameTWIDDLE = 63,
//		TokenNameDIVIDE = 8,
//		TokenNameGREATER = 15,
//		TokenNameLESS = 11,
//		TokenNameLPAREN = 24,
//		TokenNameRPAREN = 26,
//		TokenNameLBRACE = 49,
//		TokenNameRBRACE = 32,
//		TokenNameLBRACKET = 10,
//		TokenNameRBRACKET = 64,
//		TokenNameSEMICOLON = 28,
//		TokenNameQUESTION = 29,
//		TokenNameCOLON = 61,
//		TokenNameCOMMA = 33,
//		TokenNameDOT = 3,
//		TokenNameEQUAL = 70,
//		TokenNameAT = 37,
//		TokenNameELLIPSIS = 113,
//		TokenNameARROW = 110,
//		TokenNameCOLON_COLON = 9,
int		TokenNameBeginLambda = 150,
		TokenNameBeginIntersectionCast = 165,
		TokenNameBeginTypeArguments = 183,
		TokenNameElidedSemicolonAndRightBrace = 166,
		TokenNameAT308 = 157,
		TokenNameAT308DOTDOTDOT = 166,
		TokenNameEOF = 167,
		TokenNameERROR = 168;
	  /** End of File. */
	  int EOF = 0;
	  /** RegularExpression Id. */
	  int TokenNameCOMMENT_LINE = 8;
	  /** RegularExpression Id. */
	  int FORMAL_COMMENT = 9;
	  /** RegularExpression Id. */
	  int TokenNameCOMMENT_BLOCK = 10;
	  /** RegularExpression Id. */
	  int TokenNameabstract = 12;
	  /** RegularExpression Id. */
	  int TokenNameassert = 13;
	  /** RegularExpression Id. */
	  int TokenNameboolean = 14;
	  /** RegularExpression Id. */
	  int TokenNamebreak = 15;
	  /** RegularExpression Id. */
	  int TokenNamebyte = 16;
	  /** RegularExpression Id. */
	  int TokenNamecase = 17;
	  /** RegularExpression Id. */
	  int TokenNamecatch = 18;
	  /** RegularExpression Id. */
	  int TokenNamechar = 19;
	  /** RegularExpression Id. */
	  int TokenNameclass = 20;
	  /** RegularExpression Id. */
	  int TokenNameconst = 21;
	  /** RegularExpression Id. */
	  int TokenNamecontinue = 22;
	  /** RegularExpression Id. */
	  int TokenNamedefault = 23;
	  /** RegularExpression Id. */
	  int TokenNamedo = 24;
	  /** RegularExpression Id. */
	  int TokenNamedouble = 25;
	  /** RegularExpression Id. */
	  int TokenNameelse = 26;
	  /** RegularExpression Id. */
	  int TokenNameenum = 27;
	  /** RegularExpression Id. */
	  int TokenNameextends = 28;
	  /** RegularExpression Id. */
	  int TokenNamefalse = 29;
	  /** RegularExpression Id. */
	  int TokenNamefinal = 30;
	  /** RegularExpression Id. */
	  int TokenNamefinally = 31;
	  /** RegularExpression Id. */
	  int TokenNamefloat = 32;
	  /** RegularExpression Id. */
	  int TokenNamefor = 33;
	  /** RegularExpression Id. */
	  int TokenNamegoto = 34;
	  /** RegularExpression Id. */
	  int TokenNameif = 35;
	  /** RegularExpression Id. */
	  int TokenNameimplements = 36;
	  /** RegularExpression Id. */
	  int TokenNameimport = 37;
	  /** RegularExpression Id. */
	  int TokenNameinstanceof = 38;
	  /** RegularExpression Id. */
	  int TokenNameint = 39;
	  /** RegularExpression Id. */
	  int TokenNameinterface = 40;
	  /** RegularExpression Id. */
	  int TokenNamelong = 41;
	  /** RegularExpression Id. */
	  int TokenNamenative = 42;
	  /** RegularExpression Id. */
	  int TokenNamenew = 43;
	  /** RegularExpression Id. */
	  int TokenNamenull = 44;
	  /** RegularExpression Id. */
	  int TokenNamepackage = 45;
	  /** RegularExpression Id. */
	  int TokenNameprivate = 46;
	  /** RegularExpression Id. */
	  int TokenNameprotected = 47;
	  /** RegularExpression Id. */
	  int TokenNamepublic = 48;
	  /** RegularExpression Id. */
	  int TokenNamereturn = 49;
	  /** RegularExpression Id. */
	  int TokenNameshort = 50;
	  /** RegularExpression Id. */
	  int TokenNamestatic = 51;
	  /** RegularExpression Id. */
	  int TokenNamestrictfp = 52;
	  /** RegularExpression Id. */
	  int TokenNamesuper = 53;
	  /** RegularExpression Id. */
	  int TokenNameswitch = 54;
	  /** RegularExpression Id. */
	  int TokenNamesynchronized = 55;
	  /** RegularExpression Id. */
	  int TokenNamethis = 56;
	  /** RegularExpression Id. */
	  int TokenNamethrow = 57;
	  /** RegularExpression Id. */
	  int TokenNamethrows = 58;
	  /** RegularExpression Id. */
	  int TokenNametransient = 59;
	  /** RegularExpression Id. */
	  int TokenNametrue = 60;
	  /** RegularExpression Id. */
	  int TokenNametry = 61;
	  /** RegularExpression Id. */
	  int TokenNamevoid = 62;
	  /** RegularExpression Id. */
	  int TokenNamevolatile = 63;
	  /** RegularExpression Id. */
	  int TokenNamewhile = 64;
	  /** RegularExpression Id. */
	  int TokenNamemodule = 65;
	  /** RegularExpression Id. */
	  int TokenNameexport = 66;
	  /** RegularExpression Id. */
	  int TokenNameref = 67;
	  /** RegularExpression Id. */
	  int TokenNameout = 68;
	  /** RegularExpression Id. */
	  int TokenNameget = 69;
	  /** RegularExpression Id. */
	  int TokenNameset = 70;
	  /** RegularExpression Id. */
	  int TokenNameadd = 71;
	  /** RegularExpression Id. */
	  int TokenNameremove = 72;
	  /** RegularExpression Id. */
	  int TokenNameevent = 73;
	  /** RegularExpression Id. */
	  int TokenNamefunction = 74;
	  /** RegularExpression Id. */
	  int TokenNameIntegerLiteral = 75;
	  /** RegularExpression Id. */
	  int TokenNameLongLiteral = 76;
	  /** RegularExpression Id. */
	  int DECIMAL_LITERAL = 77;
	  /** RegularExpression Id. */
	  int HEX_LITERAL = 78;
	  /** RegularExpression Id. */
	  int BINARY_LITERAL = 79;
	  /** RegularExpression Id. */
	  int OCTAL_LITERAL = 80;
	  /** RegularExpression Id. */
	  int TokenNameFloatingPointLiteral = 81;
	  /** RegularExpression Id. */
	  int TokenNameDoubleLiteral = 82;
	  /** RegularExpression Id. */
	  int DECIMAL_FLOATING_POINT_LITERAL = 83;
	  /** RegularExpression Id. */
	  int DECIMAL_EXPONENT = 84;
	  /** RegularExpression Id. */
	  int HEXADECIMAL_FLOATING_POINT_LITERAL = 85;
	  /** RegularExpression Id. */
	  int HEXADECIMAL_EXPONENT = 86;
	  /** RegularExpression Id. */
	  int TokenNameCharacterLiteral = 87;
	  /** RegularExpression Id. */
	  int TokenNameStringLiteral = 88;
	  /** RegularExpression Id. */
	  int TokenNameIdentifier = 89;
	  /** RegularExpression Id. */
	  int LETTER = 90;
	  /** RegularExpression Id. */
	  int PART_LETTER = 91;
	  /** RegularExpression Id. */
	  int TokenNameLPAREN = 92;
	  /** RegularExpression Id. */
	  int TokenNameRPAREN = 93;
	  /** RegularExpression Id. */
	  int TokenNameLBRACE = 94;
	  /** RegularExpression Id. */
	  int TokenNameRBRACE = 95;
	  /** RegularExpression Id. */
	  int TokenNameLBRACKET = 96;
	  /** RegularExpression Id. */
	  int TokenNameRBRACKET = 97;
	  /** RegularExpression Id. */
	  int TokenNameSEMICOLON = 98;
	  /** RegularExpression Id. */
	  int TokenNameCOMMA = 99;
	  /** RegularExpression Id. */
	  int TokenNameDOT = 100;
	  /** RegularExpression Id. */
	  int TokenNameAT = 101;
	  /** RegularExpression Id. */
	  int TokenNameEQUAL = 102;
	  /** RegularExpression Id. */
	  int TokenNameLESS = 103;
	  /** RegularExpression Id. */
	  int TokenNameNOT = 104;
	  /** RegularExpression Id. */
	  int TokenNameTWIDDLE = 105;
	  /** RegularExpression Id. */
	  int TokenNameQUESTION = 106;
	  /** RegularExpression Id. */
	  int TokenNameCOLON = 107;
	  /** RegularExpression Id. */
	  int TokenNameEQUAL_EQUAL = 108;
	  /** RegularExpression Id. */
	  int TokenNameLESS_EQUAL = 109;
	  /** RegularExpression Id. */
	  int TokenNameGREATER_EQUAL = 110;
	  /** RegularExpression Id. */
	  int TokenNameNOT_EQUAL = 111;
	  /** RegularExpression Id. */
	  int TokenNameOR_OR = 112;
	  /** RegularExpression Id. */
	  int TokenNameAND_AND = 113;
	  /** RegularExpression Id. */
	  int TokenNamePLUS_PLUS = 114;
	  /** RegularExpression Id. */
	  int TokenNameMINUS_MINUS = 115;
	  /** RegularExpression Id. */
	  int TokenNamePLUS = 116;
	  /** RegularExpression Id. */
	  int TokenNameMINUS = 117;
	  /** RegularExpression Id. */
	  int TokenNameMULTIPLY = 118;
	  /** RegularExpression Id. */
	  int TokenNameDIVIDE = 119;
	  /** RegularExpression Id. */
	  int TokenNameAND = 120;
	  /** RegularExpression Id. */
	  int TokenNameOR = 121;
	  /** RegularExpression Id. */
	  int TokenNameXOR = 122;
	  /** RegularExpression Id. */
	  int TokenNameREMAINDER = 123;
	  /** RegularExpression Id. */
	  int TokenNameLEFT_SHIFT = 124;
	  /** RegularExpression Id. */
	  int TokenNamePLUS_EQUAL = 125;
	  /** RegularExpression Id. */
	  int TokenNameMINUS_EQUAL = 126;
	  /** RegularExpression Id. */
	  int TokenNameMULTIPLY_EQUAL = 127;
	  /** RegularExpression Id. */
	  int TokenNameDIVIDE_EQUAL = 128;
	  /** RegularExpression Id. */
	  int TokenNameAND_EQUAL = 129;
	  /** RegularExpression Id. */
	  int TokenNameOR_EQUAL = 130;
	  /** RegularExpression Id. */
	  int TokenNameXOR_EQUAL = 131;
	  /** RegularExpression Id. */
	  int TokenNameREMAINDER_EQUAL = 132;
	  /** RegularExpression Id. */
	  int TokenNameLEFT_SHIFT_EQUAL = 133;
	  /** RegularExpression Id. */
	  int TokenNameRIGHT_SHIFT_EQUAL = 134;
	  /** RegularExpression Id. */
	  int TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 135;
	  /** RegularExpression Id. */
	  int TokenNameELLIPSIS = 136;
	  /** RegularExpression Id. */
	  int TokenNameCOLON_COLON = 137;
	  /** RegularExpression Id. */
	  int TokenNameARROW = 138;
	  /** RegularExpression Id. */
	  int TokenNameSIMPLE_CLOSE_TAG = 139;
	  /** RegularExpression Id. */
	  int TokenNameCLOSE_TAG = 140;
	  /** RegularExpression Id. */
	  int TokenNameUNSIGNED_RIGHT_SHIFT = 141;
	  /** RegularExpression Id. */
	  int TokenNameRIGHT_SHIFT = 142;
	  /** RegularExpression Id. */
	  int TokenNameGREATER = 143;
	  /** RegularExpression Id. */
	  int STUFF_TO_IGNORE = 145;

	  /** Lexical state. */
	  int DEFAULT = 0;
	  /** Lexical state. */
	  int IN_FORMAL_COMMENT = 1;
	  /** Lexical state. */
	  int IN_MULTI_LINE_COMMENT = 2;

	  /** Literal token values. */
	  String[] tokenImage = {
	    "<EOF>",
	    "\" \"",
	    "\"\\t\"",
	    "\"\\n\"",
	    "\"\\r\"",
	    "\"\\f\"",
	    "<token of kind 6>",
	    "\"/*\"",
	    "<TokenNameCOMMENT_LINE>",
	    "\"*/\"",
	    "\"*/\"",
	    "<token of kind 11>",
	    "\"abstract\"",
	    "\"assert\"",
	    "\"boolean\"",
	    "\"break\"",
	    "\"byte\"",
	    "\"case\"",
	    "\"catch\"",
	    "\"char\"",
	    "\"class\"",
	    "\"const\"",
	    "\"continue\"",
	    "\"default\"",
	    "\"do\"",
	    "\"double\"",
	    "\"else\"",
	    "\"enum\"",
	    "\"extends\"",
	    "\"false\"",
	    "\"final\"",
	    "\"finally\"",
	    "\"float\"",
	    "\"for\"",
	    "\"goto\"",
	    "\"if\"",
	    "\"implements\"",
	    "\"import\"",
	    "\"instanceof\"",
	    "\"int\"",
	    "\"interface\"",
	    "\"long\"",
	    "\"native\"",
	    "\"new\"",
	    "\"null\"",
	    "\"package\"",
	    "\"private\"",
	    "\"protected\"",
	    "\"public\"",
	    "\"return\"",
	    "\"short\"",
	    "\"static\"",
	    "\"strictfp\"",
	    "\"super\"",
	    "\"switch\"",
	    "\"synchronized\"",
	    "\"this\"",
	    "\"throw\"",
	    "\"throws\"",
	    "\"transient\"",
	    "\"true\"",
	    "\"try\"",
	    "\"void\"",
	    "\"volatile\"",
	    "\"while\"",
	    "\"module\"",
	    "\"export\"",
	    "\"ref\"",
	    "\"out\"",
	    "\"get\"",
	    "\"set\"",
	    "\"add\"",
	    "\"remove\"",
	    "\"event\"",
	    "\"function\"",
	    "<TokenNameIntegerLiteral>",
	    "<TokenNameLongLiteral>",
	    "<DECIMAL_LITERAL>",
	    "<HEX_LITERAL>",
	    "<BINARY_LITERAL>",
	    "<OCTAL_LITERAL>",
	    "<TokenNameFloatingPointLiteral>",
	    "<TokenNameDoubleLiteral>",
	    "<DECIMAL_FLOATING_POINT_LITERAL>",
	    "<DECIMAL_EXPONENT>",
	    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
	    "<HEXADECIMAL_EXPONENT>",
	    "<TokenNameCharacterLiteral>",
	    "<TokenNameStringLiteral>",
	    "<TokenNameIdentifier>",
	    "<LETTER>",
	    "<PART_LETTER>",
	    "\"(\"",
	    "\")\"",
	    "\"{\"",
	    "\"}\"",
	    "\"[\"",
	    "\"]\"",
	    "\";\"",
	    "\",\"",
	    "\".\"",
	    "\"@\"",
	    "\"=\"",
	    "\"<\"",
	    "\"!\"",
	    "\"~\"",
	    "\"?\"",
	    "\":\"",
	    "\"==\"",
	    "\"<=\"",
	    "\">=\"",
	    "\"!=\"",
	    "\"||\"",
	    "\"&&\"",
	    "\"++\"",
	    "\"--\"",
	    "\"+\"",
	    "\"-\"",
	    "\"*\"",
	    "\"/\"",
	    "\"&\"",
	    "\"|\"",
	    "\"^\"",
	    "\"%\"",
	    "\"<<\"",
	    "\"+=\"",
	    "\"-=\"",
	    "\"*=\"",
	    "\"/=\"",
	    "\"&=\"",
	    "\"|=\"",
	    "\"^=\"",
	    "\"%=\"",
	    "\"<<=\"",
	    "\">>=\"",
	    "\">>>=\"",
	    "\"...\"",
	    "\"::\"",
	    "\"->\"",
	    "\"/>\"",
	    "\"</\"",
	    "\">>>\"",
	    "\">>\"",
	    "\">\"",
	    "\"\\u001a\"",
	    "<STUFF_TO_IGNORE>",
	  };
}
